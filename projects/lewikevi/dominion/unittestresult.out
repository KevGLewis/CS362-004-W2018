----------------- Testing Function: gainCard() ----------------
Test player 0 drawing card 7 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 7 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 8 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 8 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 9 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 9 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 10 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 10 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 11 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 11 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 12 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 12 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 13 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 13 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 14 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 14 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 15 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 15 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 16 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 16 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 1 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 1 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 2 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 2 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 3 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 3 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 4 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 4 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 5 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 5 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 6 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 6 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 7 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 drawing card 7 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 7 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 7 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 8 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 8 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 9 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 9 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 10 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 10 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 11 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 11 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 12 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 12 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 13 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 13 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 14 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 14 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 15 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 15 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 16 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 16 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 1 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 1 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 2 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 2 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 3 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 3 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 4 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 4 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 5 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 5 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 6 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 6 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 7 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 drawing card 7 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 7 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 7 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 8 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 8 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 9 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 9 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 10 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 10 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 11 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 11 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 12 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 12 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 13 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 13 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 14 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 14 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 15 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 15 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 16 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 16 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 1 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 1 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 2 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 2 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 3 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 3 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 4 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 4 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 5 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 5 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 6 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 6 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 7 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 drawing card 7 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 7 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 7 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 8 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 8 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 9 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 9 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 10 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 10 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 11 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 11 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 12 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 12 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 13 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 13 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 14 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 14 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 15 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 15 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 16 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 16 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 1 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 1 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 2 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 2 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 3 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 3 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 4 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 4 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 5 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 5 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 6 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 6 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 7 with supply 0.
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.deckCount = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
G.handcount = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 drawing card 7 with supply 1.
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.deckCount = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
G.handcount = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Card Supply = 0, expected = 0
TEST SUCCESSFULLY COMPLETED

 >>>>> SUCCESS: Testing complete gainCard() <<<<<

File 'dominion.c'
Lines executed:19.17% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
     7616:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     7616:   11:  if (*(int*)a < *(int*)b)
     2720:   12:    return -1;
     4896:   13:  return 0;
     7616:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      136:   44:  SelectStream(1);
      136:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      272:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      136:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     2992:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    29920:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    25840:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    13600:   65:        }
     1360:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      136:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
      136:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
      136:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      136:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
      136:   95:      state->supplyCount[estate] = 12;
      136:   96:      state->supplyCount[duchy] = 12;
      136:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      136:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      136:  102:  state->supplyCount[silver] = 40;
      136:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     5712:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    44880:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    21080:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     2584:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      272:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
      272:  118:		  else{ state->supplyCount[i] = 12; }
      272:  119:		}
        -:  120:	      else
        -:  121:		{
     1088:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1360:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    19720:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    19720:  130:	}
        -:  131:
     2720:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1360:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      544:  140:      state->deckCount[i] = 0;
     4352:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1632:  143:	  state->deck[i][j] = estate;
     1632:  144:	  state->deckCount[i]++;
     1632:  145:	}
     8704:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     3808:  148:	  state->deck[i][j] = copper;
     3808:  149:	  state->deckCount[i]++;		
     3808:  150:	}
      544:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1360:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      544:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
      544:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1360:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      544:  166:      state->handCount[i] = 0;
      544:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
      544:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     7616:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     3672:  178:      state->embargoTokens[i] = 0;
     3672:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      136:  182:  state->outpostPlayed = 0;
      136:  183:  state->phase = 0;
      136:  184:  state->numActions = 1;
      136:  185:  state->numBuys = 1;
      136:  186:  state->playedCardCount = 0;
      136:  187:  state->whoseTurn = 0;
      136:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1632:  192:  for (it = 0; it < 5; it++){
      680:  193:    drawCard(state->whoseTurn, state);
      680:  194:  }
        -:  195:
      136:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      136:  198:  return 0;
      136:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      544:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      544:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      544:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    11968:  214:  while (state->deckCount[player] > 0) {
     5440:  215:    card = floor(Random() * state->deckCount[player]);
     5440:  216:    newDeck[newDeckPos] = state->deck[player][card];
     5440:  217:    newDeckPos++;
    37808:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    13464:  219:      state->deck[player][i] = state->deck[player][i+1];
    13464:  220:    }
     5440:  221:    state->deckCount[player]--;
        -:  222:  }
    11968:  223:  for (i = 0; i < newDeckPos; i++) {
     5440:  224:    state->deck[player][i] = newDeck[i];
     5440:  225:    state->deckCount[player]++;
     5440:  226:  }
        -:  227:
      544:  228:  return 0;
      544:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      408:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      680:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
      680:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      680:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      680:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      680:  576:    state->deckCount[player]--;
      680:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      680:  580:  return 0;
      680:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int z = 0;// this is the counter for the temp hand
    #####:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
    #####:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
    #####:  669:            return adventurerEffect(&drawntreasure, state, &currentPlayer, &z, temphand);
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
    #####:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
    #####:  687:	    }
    #####:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
    #####:  708:	if (supplyCount(choice1, state) <= 0){
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
    #####:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
    #####:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
    #####:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
    #####:  752:            return mineEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  753:			
        -:  754:    case remodel:
    #####:  755:            return remodelEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  756:		
        -:  757:    case smithy:
    #####:  758:            return smithyEffect(state, &currentPlayer, handPos);
        -:  759:		
        -:  760:    case village:
        -:  761:        //+1 Card
    #####:  762:        drawCard(currentPlayer, state);
        -:  763:     
        -:  764:        //+2 Actions
    #####:  765:        state->numActions = state->numActions + 2;
        -:  766:     
        -:  767:        //discard played card from hand
    #####:  768:        discardCard(handPos, currentPlayer, state, 0);
    #####:  769:        return 0;
        -:  770:            
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    #####:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
    #####:  797:		isGameOver(state);
    #####:  798:	      }
    #####:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    #####:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
    #####:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
    #####:  814:	    isGameOver(state);
    #####:  815:	  }
    #####:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    #####:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    #####:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    #####:  876:			}
    #####:  877:		    }
    #####:  878:		}
    #####:  879:	    }
        -:  880:				
    #####:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
    #####:  885:            return stewardEffect(state, &currentPlayer, choice1, choice2, choice3, handPos);
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
    #####:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
    #####:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
    #####:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
    #####:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
    #####:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  932:	  state->coins += 2;
    #####:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
    #####:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  962:	    {
    #####:  963:	      j++;
    #####:  964:	    }
    #####:  965:	}
    #####:  966:      if (j < choice2)
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  983:	    }
    #####:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
    #####:  997:		  break;
        -:  998:		}
    #####:  999:	    }
    #####: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
    #####: 1027:		}
        -: 1028:					
    #####: 1029:	    }
        -: 1030:				
    #####: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
    #####: 1082:	if (i != currentPlayer){
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1086:	}
    #####: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (index > -1)
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
    #####: 1122:}
        -: 1123:
        -: 1124:int adventurerEffect(int *drawntreasure, struct gameState *state, int *currentPlayer, int *z, int *temphand){
    #####: 1125:    while((*drawntreasure)<2){
    #####: 1126:        if (state->deckCount[*currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1127:            shuffle(*currentPlayer, state);
    #####: 1128:        }
    #####: 1129:        drawCard(*currentPlayer, state);
    #####: 1130:        int cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1131:        if (cardDrawn == copper || cardDrawn == silver)
    #####: 1132:            (*drawntreasure)++;
        -: 1133:        else{
    #####: 1134:            temphand[(*z)]=cardDrawn;
    #####: 1135:            state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1136:            (*z)++;
        -: 1137:        }
        -: 1138:    }
    #####: 1139:    while((*z)-1>=0){
    #####: 1140:        state->discard[*currentPlayer][state->discardCount[*currentPlayer]++]=temphand[(*z)-1]; // discard all cards in play that have been drawn
    #####: 1141:        (*z)=(*z)-1;
        -: 1142:    }
    #####: 1143:    return 0;
        -: 1144:}
        -: 1145:
        -: 1146:int mineEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
    #####: 1147:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1148:    
    #####: 1149:    if (state->hand[*currentPlayer][choice1] < copper || state->hand[*currentPlayer][choice1] > gold)
        -: 1150:    {
    #####: 1151:        return -1;
        -: 1152:    }
        -: 1153:    
    #####: 1154:    if (choice2 > treasure_map)
        -: 1155:    {
    #####: 1156:        return -1;
        -: 1157:    }
        -: 1158:
    #####: 1159:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1160:    {
    #####: 1161:        return -1;
        -: 1162:    }
        -: 1163:    
    #####: 1164:    gainCard(choice2, state, 2, *currentPlayer);
        -: 1165:    
        -: 1166:    //discard card from hand
    #####: 1167:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1168:    
        -: 1169:    //discard trashed card
    #####: 1170:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1171:    {
    #####: 1172:        if (state->hand[*currentPlayer][i] == j)
        -: 1173:        {
    #####: 1174:            discardCard(i, *currentPlayer, state, 0);
    #####: 1175:            break;
        -: 1176:        }
    #####: 1177:    }
        -: 1178:    
    #####: 1179:    return 0;
    #####: 1180:}
        -: 1181:
        -: 1182:int remodelEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
    #####: 1183:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1184:    
    #####: 1185:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 1) > getCost(choice2) )
        -: 1186:    {
    #####: 1187:        return -1;
        -: 1188:    }
        -: 1189:    
    #####: 1190:    gainCard(choice2, state, 0, *currentPlayer);
        -: 1191:    
        -: 1192:    //discard card from hand
    #####: 1193:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1194:    
        -: 1195:    //discard trashed card
    #####: 1196:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1197:    {
    #####: 1198:        if (state->hand[*currentPlayer][i] == j)
        -: 1199:        {
    #####: 1200:            discardCard(i, *currentPlayer, state, 1);
    #####: 1201:            break;
        -: 1202:        }
    #####: 1203:    }
        -: 1204:    
        -: 1205:    
    #####: 1206:    return 0;
    #####: 1207:}
        -: 1208:
        -: 1209:int smithyEffect(struct gameState *state, int *currentPlayer, int handPos){
        -: 1210:    //+3 Cards
    #####: 1211:    for (int i = 0; i <= 3; i++)
        -: 1212:    {
    #####: 1213:        drawCard(*currentPlayer, state);
    #####: 1214:    }
        -: 1215:    
        -: 1216:    //discard card from hand
    #####: 1217:    discardCard(handPos, *currentPlayer, state,2);
    #####: 1218:    return 0;
        -: 1219:}
        -: 1220:
        -: 1221:int stewardEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int choice3, int handPos){
    #####: 1222:    if (choice1 == 1)
        -: 1223:    {
        -: 1224:        //+2 cards
    #####: 1225:        drawCard(*currentPlayer, state);
    #####: 1226:        drawCard(*currentPlayer, state);
    #####: 1227:    }
    #####: 1228:    else if (choice1 == 2)
        -: 1229:    {
        -: 1230:        //+2 coins
    #####: 1231:        state->coins = state->coins + 2;
    #####: 1232:    }
        -: 1233:    else
        -: 1234:    {
        -: 1235:        //trash 2 cards in hand
    #####: 1236:        discardCard(choice2, *currentPlayer, state, 1);
    #####: 1237:        discardCard(choice3, *currentPlayer, state, 1);
        -: 1238:    }
        -: 1239:    
        -: 1240:    //discard card from hand
    #####: 1241:    discardCard(handPos, *currentPlayer, state, 0);
    #####: 1242:    return 0;
        -: 1243:}
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
    #####: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to played pile
    #####: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1255:      state->playedCardCount++;
    #####: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
    #####: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
    #####: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
    #####: 1266:    }
    #####: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
    #####: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
    #####: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
    #####: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
    #####: 1282:  return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
      408: 1290:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1291:    {
      204: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
      204: 1300:  if (toFlag == 1)
        -: 1301:    {
       68: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       68: 1303:      state->deckCount[player]++;
       68: 1304:    }
      136: 1305:  else if (toFlag == 2)
        -: 1306:    {
       68: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       68: 1308:      state->handCount[player]++;
       68: 1309:    }
        -: 1310:  else
        -: 1311:    {
       68: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       68: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
      204: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
      204: 1319:  return 0;
      408: 1320:}
        -: 1321:
        -: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
      136: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
     1632: 1330:  for (i = 0; i < state->handCount[player]; i++)
        -: 1331:    {
      680: 1332:      if (state->hand[player][i] == copper)
        -: 1333:	{
      544: 1334:	  state->coins += 1;
      544: 1335:	}
      136: 1336:      else if (state->hand[player][i] == silver)
        -: 1337:	{
    #####: 1338:	  state->coins += 2;
    #####: 1339:	}
      136: 1340:      else if (state->hand[player][i] == gold)
        -: 1341:	{
    #####: 1342:	  state->coins += 3;
    #####: 1343:	}	
      680: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
      136: 1347:  state->coins += bonus;
        -: 1348:
      136: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:int customAssert(bool test){
      544: 1353:    if (test == false){
    #####: 1354:        printf("TEST FAILED\n");
    #####: 1355:        return 1;
        -: 1356:    }
        -: 1357:    else{
      544: 1358:        printf("TEST SUCCESSFULLY COMPLETED\n");
      544: 1359:        return 0;
        -: 1360:    }
      544: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
----------------- Testing Function: buyCard() ----------------
Test player 0 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 8 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 8 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 8 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 8 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 9 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 9 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 9 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 9 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 10 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 10 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 10 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 10 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 11 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 11 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 11 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 11 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 12 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 12 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 12 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 12 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 13 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 13 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 13 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 13 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 14 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 14 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 14 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 14 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 15 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 15 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 15 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 15 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 16 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 16 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 16 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 16 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 1 with supply 0, money 1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 1 with supply 0, money 1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 1 with supply 1, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 1 with supply 1, money 2, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 2 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 2 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 2 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 2 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 3 with supply 0, money 7, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 3 with supply 0, money 7, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 3 with supply 1, money 8, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 3 with supply 1, money 8, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 4 with supply 0, money -1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = -1, expected = -1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 4 with supply 0, money -1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = -1, expected = -1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 4 with supply 1, money 0, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 4 with supply 1, money 0, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 5 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 5 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 5 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 5 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 6 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 6 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 6 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 6 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 8 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 8 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 8 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 8 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 9 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 9 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 9 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 9 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 10 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 10 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 10 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 10 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 11 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 11 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 11 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 11 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 12 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 12 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 12 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 12 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 13 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 13 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 13 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 13 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 14 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 14 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 14 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 14 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 15 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 15 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 15 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 15 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 16 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 16 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 16 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 16 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 1 with supply 0, money 1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 1 with supply 0, money 1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 1 with supply 1, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 1 with supply 1, money 2, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 2 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 2 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 2 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 2 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 3 with supply 0, money 7, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 3 with supply 0, money 7, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 3 with supply 1, money 8, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 3 with supply 1, money 8, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 4 with supply 0, money -1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = -1, expected = -1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 4 with supply 0, money -1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = -1, expected = -1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 4 with supply 1, money 0, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 4 with supply 1, money 0, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 5 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 5 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 5 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 5 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 6 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 6 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 6 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 6 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 8 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 8 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 8 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 8 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 9 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 9 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 9 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 9 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 10 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 10 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 10 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 10 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 11 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 11 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 11 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 11 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 12 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 12 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 12 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 12 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 13 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 13 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 13 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 13 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 14 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 14 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 14 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 14 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 15 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 15 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 15 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 15 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 16 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 16 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 16 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 16 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 1 with supply 0, money 1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 1 with supply 0, money 1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 1 with supply 1, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 1 with supply 1, money 2, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 2 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 2 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 2 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 2 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 3 with supply 0, money 7, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 3 with supply 0, money 7, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 3 with supply 1, money 8, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 3 with supply 1, money 8, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 4 with supply 0, money -1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = -1, expected = -1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 4 with supply 0, money -1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = -1, expected = -1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 4 with supply 1, money 0, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 4 with supply 1, money 0, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 5 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 5 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 5 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 5 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 6 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 6 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 6 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 6 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 8 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 8 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 8 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 8 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 9 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 9 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 9 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 9 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 10 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 10 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 10 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 10 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 11 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 11 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 11 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 11 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 12 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 12 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 12 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 12 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 13 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 13 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 13 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 13 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 14 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 14 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 14 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 14 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 15 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 15 with supply 0, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 15 with supply 1, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 15 with supply 1, money 4, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 16 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 16 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 16 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 16 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 1 with supply 0, money 1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 1 with supply 0, money 1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 1 with supply 1, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 1 with supply 1, money 2, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 2 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 2 with supply 0, money 4, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 2 with supply 1, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 2 with supply 1, money 5, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 3 with supply 0, money 7, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 3 with supply 0, money 7, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 3 with supply 1, money 8, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 3 with supply 1, money 8, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 4 with supply 0, money -1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = -1, expected = -1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 4 with supply 0, money -1, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = -1, expected = -1
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 4 with supply 1, money 0, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 4 with supply 1, money 0, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 5 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 5 with supply 0, money 2, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 5 with supply 1, money 3, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 5 with supply 1, money 3, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 6 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 6 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 6 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 6 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 7 with supply 0, money 5, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
G.numBuys = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3 buying card 7 with supply 1, money 6, discard 0. 
G.discardCount = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
G.supplyCount = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
G.numBuys = 0, expected = 0
TEST SUCCESSFULLY COMPLETED

 >>>>> SUCCESS: Testing complete buyCard() <<<<<

File 'dominion.c'
Lines executed:23.77% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    22848:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    22848:   11:  if (*(int*)a < *(int*)b)
     8160:   12:    return -1;
    14688:   13:  return 0;
    22848:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      408:   44:  SelectStream(1);
      408:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      816:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      408:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     8976:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    89760:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    77520:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    40800:   65:        }
     4080:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      408:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
      408:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
      408:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      408:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
      408:   95:      state->supplyCount[estate] = 12;
      408:   96:      state->supplyCount[duchy] = 12;
      408:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      408:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      408:  102:  state->supplyCount[silver] = 40;
      408:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    17136:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   134640:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    63240:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     7752:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      816:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
      816:  118:		  else{ state->supplyCount[i] = 12; }
      816:  119:		}
        -:  120:	      else
        -:  121:		{
     3264:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     4080:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    59160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    59160:  130:	}
        -:  131:
     8160:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4080:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1632:  140:      state->deckCount[i] = 0;
    13056:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     4896:  143:	  state->deck[i][j] = estate;
     4896:  144:	  state->deckCount[i]++;
     4896:  145:	}
    26112:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    11424:  148:	  state->deck[i][j] = copper;
    11424:  149:	  state->deckCount[i]++;		
    11424:  150:	}
     1632:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4080:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1632:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     1632:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4080:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1632:  166:      state->handCount[i] = 0;
     1632:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     1632:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    22848:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    11016:  178:      state->embargoTokens[i] = 0;
    11016:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      408:  182:  state->outpostPlayed = 0;
      408:  183:  state->phase = 0;
      408:  184:  state->numActions = 1;
      408:  185:  state->numBuys = 1;
      408:  186:  state->playedCardCount = 0;
      408:  187:  state->whoseTurn = 0;
      408:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     4896:  192:  for (it = 0; it < 5; it++){
     2040:  193:    drawCard(state->whoseTurn, state);
     2040:  194:  }
        -:  195:
      408:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      408:  198:  return 0;
      408:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1632:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1632:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1632:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    35904:  214:  while (state->deckCount[player] > 0) {
    16320:  215:    card = floor(Random() * state->deckCount[player]);
    16320:  216:    newDeck[newDeckPos] = state->deck[player][card];
    16320:  217:    newDeckPos++;
   113424:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    40392:  219:      state->deck[player][i] = state->deck[player][i+1];
    40392:  220:    }
    16320:  221:    state->deckCount[player]--;
        -:  222:  }
    35904:  223:  for (i = 0; i < newDeckPos; i++) {
    16320:  224:    state->deck[player][i] = newDeck[i];
    16320:  225:    state->deckCount[player]++;
    16320:  226:  }
        -:  227:
     1632:  228:  return 0;
     1632:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      272:  280:  who = state->whoseTurn;
        -:  281:
      272:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
      136:  285:    return -1;
      136:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       68:  289:    return -1;
       68:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       68:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       68:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       68:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       68:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       68:  308:  return 0;
      272:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      612:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     2040:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
     2040:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     2040:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2040:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2040:  576:    state->deckCount[player]--;
     2040:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     2040:  580:  return 0;
     2040:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      612:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       36:  590:      return 2;
        -:  591:    case duchy:
       36:  592:      return 5;
        -:  593:    case province:
       36:  594:      return 8;
        -:  595:    case copper:
       36:  596:      return 0;
        -:  597:    case silver:
       36:  598:      return 3;
        -:  599:    case gold:
       36:  600:      return 6;
        -:  601:    case adventurer:
       72:  602:      return 6;
        -:  603:    case council_room:
       36:  604:      return 5;
        -:  605:    case feast:
       36:  606:      return 4;
        -:  607:    case gardens:
       36:  608:      return 4;
        -:  609:    case mine:
       36:  610:      return 5;
        -:  611:    case remodel:
       36:  612:      return 4;
        -:  613:    case smithy:
       36:  614:      return 4;
        -:  615:    case village:
       36:  616:      return 3;
        -:  617:    case baron:
       36:  618:      return 4;
        -:  619:    case great_hall:
       36:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      612:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int z = 0;// this is the counter for the temp hand
    #####:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
    #####:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
    #####:  669:            return adventurerEffect(&drawntreasure, state, &currentPlayer, &z, temphand);
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
    #####:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
    #####:  687:	    }
    #####:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
    #####:  708:	if (supplyCount(choice1, state) <= 0){
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
    #####:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
    #####:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
    #####:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
    #####:  752:            return mineEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  753:			
        -:  754:    case remodel:
    #####:  755:            return remodelEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  756:		
        -:  757:    case smithy:
    #####:  758:            return smithyEffect(state, &currentPlayer, handPos);
        -:  759:		
        -:  760:    case village:
        -:  761:        //+1 Card
    #####:  762:        drawCard(currentPlayer, state);
        -:  763:     
        -:  764:        //+2 Actions
    #####:  765:        state->numActions = state->numActions + 2;
        -:  766:     
        -:  767:        //discard played card from hand
    #####:  768:        discardCard(handPos, currentPlayer, state, 0);
    #####:  769:        return 0;
        -:  770:            
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    #####:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
    #####:  797:		isGameOver(state);
    #####:  798:	      }
    #####:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    #####:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
    #####:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
    #####:  814:	    isGameOver(state);
    #####:  815:	  }
    #####:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    #####:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    #####:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    #####:  876:			}
    #####:  877:		    }
    #####:  878:		}
    #####:  879:	    }
        -:  880:				
    #####:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
    #####:  885:            return stewardEffect(state, &currentPlayer, choice1, choice2, choice3, handPos);
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
    #####:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
    #####:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
    #####:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
    #####:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
    #####:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  932:	  state->coins += 2;
    #####:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
    #####:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  962:	    {
    #####:  963:	      j++;
    #####:  964:	    }
    #####:  965:	}
    #####:  966:      if (j < choice2)
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  983:	    }
    #####:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
    #####:  997:		  break;
        -:  998:		}
    #####:  999:	    }
    #####: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
    #####: 1027:		}
        -: 1028:					
    #####: 1029:	    }
        -: 1030:				
    #####: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
    #####: 1082:	if (i != currentPlayer){
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1086:	}
    #####: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (index > -1)
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
    #####: 1122:}
        -: 1123:
        -: 1124:int adventurerEffect(int *drawntreasure, struct gameState *state, int *currentPlayer, int *z, int *temphand){
    #####: 1125:    while((*drawntreasure)<2){
    #####: 1126:        if (state->deckCount[*currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1127:            shuffle(*currentPlayer, state);
    #####: 1128:        }
    #####: 1129:        drawCard(*currentPlayer, state);
    #####: 1130:        int cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1131:        if (cardDrawn == copper || cardDrawn == silver)
    #####: 1132:            (*drawntreasure)++;
        -: 1133:        else{
    #####: 1134:            temphand[(*z)]=cardDrawn;
    #####: 1135:            state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1136:            (*z)++;
        -: 1137:        }
        -: 1138:    }
    #####: 1139:    while((*z)-1>=0){
    #####: 1140:        state->discard[*currentPlayer][state->discardCount[*currentPlayer]++]=temphand[(*z)-1]; // discard all cards in play that have been drawn
    #####: 1141:        (*z)=(*z)-1;
        -: 1142:    }
    #####: 1143:    return 0;
        -: 1144:}
        -: 1145:
        -: 1146:int mineEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
    #####: 1147:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1148:    
    #####: 1149:    if (state->hand[*currentPlayer][choice1] < copper || state->hand[*currentPlayer][choice1] > gold)
        -: 1150:    {
    #####: 1151:        return -1;
        -: 1152:    }
        -: 1153:    
    #####: 1154:    if (choice2 > treasure_map)
        -: 1155:    {
    #####: 1156:        return -1;
        -: 1157:    }
        -: 1158:
    #####: 1159:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1160:    {
    #####: 1161:        return -1;
        -: 1162:    }
        -: 1163:    
    #####: 1164:    gainCard(choice2, state, 2, *currentPlayer);
        -: 1165:    
        -: 1166:    //discard card from hand
    #####: 1167:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1168:    
        -: 1169:    //discard trashed card
    #####: 1170:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1171:    {
    #####: 1172:        if (state->hand[*currentPlayer][i] == j)
        -: 1173:        {
    #####: 1174:            discardCard(i, *currentPlayer, state, 0);
    #####: 1175:            break;
        -: 1176:        }
    #####: 1177:    }
        -: 1178:    
    #####: 1179:    return 0;
    #####: 1180:}
        -: 1181:
        -: 1182:int remodelEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
    #####: 1183:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1184:    
    #####: 1185:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 1) > getCost(choice2) )
        -: 1186:    {
    #####: 1187:        return -1;
        -: 1188:    }
        -: 1189:    
    #####: 1190:    gainCard(choice2, state, 0, *currentPlayer);
        -: 1191:    
        -: 1192:    //discard card from hand
    #####: 1193:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1194:    
        -: 1195:    //discard trashed card
    #####: 1196:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1197:    {
    #####: 1198:        if (state->hand[*currentPlayer][i] == j)
        -: 1199:        {
    #####: 1200:            discardCard(i, *currentPlayer, state, 1);
    #####: 1201:            break;
        -: 1202:        }
    #####: 1203:    }
        -: 1204:    
        -: 1205:    
    #####: 1206:    return 0;
    #####: 1207:}
        -: 1208:
        -: 1209:int smithyEffect(struct gameState *state, int *currentPlayer, int handPos){
        -: 1210:    //+3 Cards
    #####: 1211:    for (int i = 0; i <= 3; i++)
        -: 1212:    {
    #####: 1213:        drawCard(*currentPlayer, state);
    #####: 1214:    }
        -: 1215:    
        -: 1216:    //discard card from hand
    #####: 1217:    discardCard(handPos, *currentPlayer, state,2);
    #####: 1218:    return 0;
        -: 1219:}
        -: 1220:
        -: 1221:int stewardEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int choice3, int handPos){
    #####: 1222:    if (choice1 == 1)
        -: 1223:    {
        -: 1224:        //+2 cards
    #####: 1225:        drawCard(*currentPlayer, state);
    #####: 1226:        drawCard(*currentPlayer, state);
    #####: 1227:    }
    #####: 1228:    else if (choice1 == 2)
        -: 1229:    {
        -: 1230:        //+2 coins
    #####: 1231:        state->coins = state->coins + 2;
    #####: 1232:    }
        -: 1233:    else
        -: 1234:    {
        -: 1235:        //trash 2 cards in hand
    #####: 1236:        discardCard(choice2, *currentPlayer, state, 1);
    #####: 1237:        discardCard(choice3, *currentPlayer, state, 1);
        -: 1238:    }
        -: 1239:    
        -: 1240:    //discard card from hand
    #####: 1241:    discardCard(handPos, *currentPlayer, state, 0);
    #####: 1242:    return 0;
        -: 1243:}
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
    #####: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to played pile
    #####: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1255:      state->playedCardCount++;
    #####: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
    #####: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
    #####: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
    #####: 1266:    }
    #####: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
    #####: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
    #####: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
    #####: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
    #####: 1282:  return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
      476: 1290:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1291:    {
      204: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
      272: 1300:  if (toFlag == 1)
        -: 1301:    {
       68: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       68: 1303:      state->deckCount[player]++;
       68: 1304:    }
      204: 1305:  else if (toFlag == 2)
        -: 1306:    {
       68: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       68: 1308:      state->handCount[player]++;
       68: 1309:    }
        -: 1310:  else
        -: 1311:    {
      136: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      136: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
      272: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
      272: 1319:  return 0;
      476: 1320:}
        -: 1321:
        -: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
      408: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
     4896: 1330:  for (i = 0; i < state->handCount[player]; i++)
        -: 1331:    {
     2040: 1332:      if (state->hand[player][i] == copper)
        -: 1333:	{
     1632: 1334:	  state->coins += 1;
     1632: 1335:	}
      408: 1336:      else if (state->hand[player][i] == silver)
        -: 1337:	{
    #####: 1338:	  state->coins += 2;
    #####: 1339:	}
      408: 1340:      else if (state->hand[player][i] == gold)
        -: 1341:	{
    #####: 1342:	  state->coins += 3;
    #####: 1343:	}	
     2040: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
      408: 1347:  state->coins += bonus;
        -: 1348:
      408: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:int customAssert(bool test){
     1632: 1353:    if (test == false){
    #####: 1354:        printf("TEST FAILED\n");
    #####: 1355:        return 1;
        -: 1356:    }
        -: 1357:    else{
     1632: 1358:        printf("TEST SUCCESSFULLY COMPLETED\n");
     1632: 1359:        return 0;
        -: 1360:    }
     1632: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
----------------- Testing Function: updateCoins() ----------------
Test player 0, with 0 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 4 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 4 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 4 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 4 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 4 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 4 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 5 gold, 0 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 5 gold, 1 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 5 gold, 2 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 5 gold, 3 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 5 gold, 4 bonus. 
G.coins = 19, expected = 19
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 0 silver, 5 gold, 5 bonus. 
G.coins = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 3 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 3 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 3 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 3 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 3 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 3 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 4 gold, 0 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 4 gold, 1 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 4 gold, 2 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 4 gold, 3 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 4 gold, 4 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 1 silver, 4 gold, 5 bonus. 
G.coins = 19, expected = 19
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 2 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 2 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 2 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 2 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 2 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 2 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 3 gold, 0 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 3 gold, 1 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 3 gold, 2 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 3 gold, 3 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 3 gold, 4 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 2 silver, 3 gold, 5 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 1 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 1 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 1 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 1 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 1 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 1 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 2 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 2 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 2 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 2 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 2 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 3 silver, 2 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 0 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 0 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 0 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 0 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 0 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 0 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 1 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 1 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 1 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 1 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 1 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 4 silver, 1 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 5 silver, 0 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 5 silver, 0 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 5 silver, 0 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 5 silver, 0 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 5 silver, 0 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 0 copper, 5 silver, 0 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 4 gold, 0 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 4 gold, 1 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 4 gold, 2 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 4 gold, 3 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 4 gold, 4 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 0 silver, 4 gold, 5 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 3 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 3 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 3 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 3 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 3 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 1 silver, 3 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 2 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 2 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 2 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 2 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 2 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 2 silver, 2 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 1 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 1 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 1 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 1 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 1 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 3 silver, 1 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 4 silver, 0 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 4 silver, 0 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 4 silver, 0 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 4 silver, 0 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 4 silver, 0 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 1 copper, 4 silver, 0 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 2 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 3 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, with 4 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 0, with 5 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, with 5 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 0, with 5 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 0, with 5 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 0, with 5 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 0, with 5 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 4 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 4 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 4 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 4 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 4 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 4 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 5 gold, 0 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 5 gold, 1 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 5 gold, 2 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 5 gold, 3 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 5 gold, 4 bonus. 
G.coins = 19, expected = 19
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 0 silver, 5 gold, 5 bonus. 
G.coins = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 3 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 3 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 3 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 3 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 3 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 3 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 4 gold, 0 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 4 gold, 1 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 4 gold, 2 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 4 gold, 3 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 4 gold, 4 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 1 silver, 4 gold, 5 bonus. 
G.coins = 19, expected = 19
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 2 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 2 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 2 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 2 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 2 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 2 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 3 gold, 0 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 3 gold, 1 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 3 gold, 2 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 3 gold, 3 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 3 gold, 4 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 2 silver, 3 gold, 5 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 1 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 1 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 1 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 1 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 1 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 1 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 2 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 2 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 2 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 2 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 2 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 3 silver, 2 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 0 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 0 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 0 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 0 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 0 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 0 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 1 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 1 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 1 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 1 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 1 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 4 silver, 1 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 5 silver, 0 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 5 silver, 0 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 5 silver, 0 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 5 silver, 0 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 5 silver, 0 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 0 copper, 5 silver, 0 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 4 gold, 0 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 4 gold, 1 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 4 gold, 2 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 4 gold, 3 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 4 gold, 4 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 0 silver, 4 gold, 5 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 3 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 3 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 3 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 3 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 3 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 1 silver, 3 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 2 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 2 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 2 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 2 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 2 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 2 silver, 2 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 1 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 1 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 1 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 1 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 1 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 3 silver, 1 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 4 silver, 0 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 4 silver, 0 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 4 silver, 0 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 4 silver, 0 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 4 silver, 0 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 1 copper, 4 silver, 0 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 2 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 3 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, with 4 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 1, with 5 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, with 5 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 1, with 5 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 1, with 5 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 1, with 5 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 1, with 5 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 4 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 4 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 4 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 4 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 4 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 4 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 5 gold, 0 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 5 gold, 1 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 5 gold, 2 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 5 gold, 3 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 5 gold, 4 bonus. 
G.coins = 19, expected = 19
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 0 silver, 5 gold, 5 bonus. 
G.coins = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 3 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 3 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 3 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 3 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 3 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 3 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 4 gold, 0 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 4 gold, 1 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 4 gold, 2 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 4 gold, 3 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 4 gold, 4 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 1 silver, 4 gold, 5 bonus. 
G.coins = 19, expected = 19
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 2 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 2 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 2 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 2 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 2 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 2 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 3 gold, 0 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 3 gold, 1 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 3 gold, 2 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 3 gold, 3 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 3 gold, 4 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 2 silver, 3 gold, 5 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 1 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 1 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 1 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 1 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 1 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 1 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 2 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 2 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 2 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 2 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 2 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 3 silver, 2 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 0 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 0 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 0 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 0 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 0 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 0 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 1 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 1 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 1 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 1 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 1 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 4 silver, 1 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 5 silver, 0 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 5 silver, 0 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 5 silver, 0 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 5 silver, 0 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 5 silver, 0 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 0 copper, 5 silver, 0 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 4 gold, 0 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 4 gold, 1 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 4 gold, 2 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 4 gold, 3 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 4 gold, 4 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 0 silver, 4 gold, 5 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 3 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 3 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 3 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 3 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 3 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 1 silver, 3 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 2 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 2 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 2 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 2 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 2 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 2 silver, 2 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 1 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 1 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 1 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 1 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 1 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 3 silver, 1 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 4 silver, 0 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 4 silver, 0 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 4 silver, 0 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 4 silver, 0 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 4 silver, 0 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 1 copper, 4 silver, 0 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 2 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 3 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, with 4 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 2, with 5 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, with 5 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 2, with 5 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 2, with 5 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 2, with 5 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 2, with 5 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 4 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 4 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 4 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 4 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 4 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 4 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 5 gold, 0 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 5 gold, 1 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 5 gold, 2 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 5 gold, 3 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 5 gold, 4 bonus. 
G.coins = 19, expected = 19
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 0 silver, 5 gold, 5 bonus. 
G.coins = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 3 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 3 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 3 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 3 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 3 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 3 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 4 gold, 0 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 4 gold, 1 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 4 gold, 2 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 4 gold, 3 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 4 gold, 4 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 1 silver, 4 gold, 5 bonus. 
G.coins = 19, expected = 19
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 2 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 2 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 2 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 2 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 2 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 2 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 3 gold, 0 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 3 gold, 1 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 3 gold, 2 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 3 gold, 3 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 3 gold, 4 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 2 silver, 3 gold, 5 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 1 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 1 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 1 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 1 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 1 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 1 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 2 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 2 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 2 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 2 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 2 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 3 silver, 2 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 0 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 0 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 0 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 0 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 0 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 0 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 1 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 1 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 1 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 1 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 1 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 4 silver, 1 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 5 silver, 0 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 5 silver, 0 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 5 silver, 0 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 5 silver, 0 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 5 silver, 0 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 0 copper, 5 silver, 0 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 4 gold, 0 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 4 gold, 1 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 4 gold, 2 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 4 gold, 3 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 4 gold, 4 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 0 silver, 4 gold, 5 bonus. 
G.coins = 18, expected = 18
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 3 gold, 0 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 3 gold, 1 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 3 gold, 2 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 3 gold, 3 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 3 gold, 4 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 1 silver, 3 gold, 5 bonus. 
G.coins = 17, expected = 17
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 2 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 2 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 2 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 2 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 2 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 2 silver, 2 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 1 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 1 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 1 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 1 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 1 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 3 silver, 1 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 4 silver, 0 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 4 silver, 0 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 4 silver, 0 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 4 silver, 0 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 4 silver, 0 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 1 copper, 4 silver, 0 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 2, expected = 2
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 3 gold, 0 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 3 gold, 1 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 3 gold, 2 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 3 gold, 3 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 3 gold, 4 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 0 silver, 3 gold, 5 bonus. 
G.coins = 16, expected = 16
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 2 gold, 0 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 2 gold, 1 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 2 gold, 2 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 2 gold, 3 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 2 gold, 4 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 1 silver, 2 gold, 5 bonus. 
G.coins = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 1 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 1 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 1 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 1 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 1 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 2 silver, 1 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 3 silver, 0 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 3 silver, 0 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 3 silver, 0 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 3 silver, 0 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 3 silver, 0 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 2 copper, 3 silver, 0 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 3, expected = 3
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 2 gold, 0 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 2 gold, 1 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 2 gold, 2 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 2 gold, 3 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 2 gold, 4 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 0 silver, 2 gold, 5 bonus. 
G.coins = 14, expected = 14
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 1 gold, 0 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 1 gold, 1 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 1 gold, 2 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 1 gold, 3 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 1 gold, 4 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 1 silver, 1 gold, 5 bonus. 
G.coins = 13, expected = 13
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 2 silver, 0 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 2 silver, 0 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 2 silver, 0 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 2 silver, 0 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 2 silver, 0 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 3 copper, 2 silver, 0 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 4, expected = 4
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 1 gold, 0 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 1 gold, 1 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 1 gold, 2 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 1 gold, 3 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 1 gold, 4 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 0 silver, 1 gold, 5 bonus. 
G.coins = 12, expected = 12
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 1 silver, 0 gold, 0 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 1 silver, 0 gold, 1 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 1 silver, 0 gold, 2 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 1 silver, 0 gold, 3 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 1 silver, 0 gold, 4 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, with 4 copper, 1 silver, 0 gold, 5 bonus. 
G.coins = 11, expected = 11
TEST SUCCESSFULLY COMPLETED
Test player 3, with 5 copper, 0 silver, 0 gold, 0 bonus. 
G.coins = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, with 5 copper, 0 silver, 0 gold, 1 bonus. 
G.coins = 6, expected = 6
TEST SUCCESSFULLY COMPLETED
Test player 3, with 5 copper, 0 silver, 0 gold, 2 bonus. 
G.coins = 7, expected = 7
TEST SUCCESSFULLY COMPLETED
Test player 3, with 5 copper, 0 silver, 0 gold, 3 bonus. 
G.coins = 8, expected = 8
TEST SUCCESSFULLY COMPLETED
Test player 3, with 5 copper, 0 silver, 0 gold, 4 bonus. 
G.coins = 9, expected = 9
TEST SUCCESSFULLY COMPLETED
Test player 3, with 5 copper, 0 silver, 0 gold, 5 bonus. 
G.coins = 10, expected = 10
TEST SUCCESSFULLY COMPLETED

 >>>>> SUCCESS: Testing complete updateCoins() <<<<<

File 'dominion.c'
Lines executed:24.39% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    98112:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    98112:   11:  if (*(int*)a < *(int*)b)
    35040:   12:    return -1;
    63072:   13:  return 0;
    98112:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1752:   44:  SelectStream(1);
     1752:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     3504:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1752:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    38544:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   385440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   332880:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   175200:   65:        }
    17520:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1752:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
     1752:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
     1752:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1752:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
     1752:   95:      state->supplyCount[estate] = 12;
     1752:   96:      state->supplyCount[duchy] = 12;
     1752:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1752:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1752:  102:  state->supplyCount[silver] = 40;
     1752:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    73584:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   578160:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   271560:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    33288:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     3504:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
     3504:  118:		  else{ state->supplyCount[i] = 12; }
     3504:  119:		}
        -:  120:	      else
        -:  121:		{
    14016:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    17520:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   254040:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   254040:  130:	}
        -:  131:
    35040:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    17520:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     7008:  140:      state->deckCount[i] = 0;
    56064:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    21024:  143:	  state->deck[i][j] = estate;
    21024:  144:	  state->deckCount[i]++;
    21024:  145:	}
   112128:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    49056:  148:	  state->deck[i][j] = copper;
    49056:  149:	  state->deckCount[i]++;		
    49056:  150:	}
     7008:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    17520:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     7008:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     7008:  160:    }
        -:  161:
        -:  162:  //draw player hands
    17520:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     7008:  166:      state->handCount[i] = 0;
     7008:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     7008:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    98112:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    47304:  178:      state->embargoTokens[i] = 0;
    47304:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1752:  182:  state->outpostPlayed = 0;
     1752:  183:  state->phase = 0;
     1752:  184:  state->numActions = 1;
     1752:  185:  state->numBuys = 1;
     1752:  186:  state->playedCardCount = 0;
     1752:  187:  state->whoseTurn = 0;
     1752:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    21024:  192:  for (it = 0; it < 5; it++){
     8760:  193:    drawCard(state->whoseTurn, state);
     8760:  194:  }
        -:  195:
     1752:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1752:  198:  return 0;
     1752:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     7008:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     7008:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     7008:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   154176:  214:  while (state->deckCount[player] > 0) {
    70080:  215:    card = floor(Random() * state->deckCount[player]);
    70080:  216:    newDeck[newDeckPos] = state->deck[player][card];
    70080:  217:    newDeckPos++;
   487056:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   173448:  219:      state->deck[player][i] = state->deck[player][i+1];
   173448:  220:    }
    70080:  221:    state->deckCount[player]--;
        -:  222:  }
   154176:  223:  for (i = 0; i < newDeckPos; i++) {
    70080:  224:    state->deck[player][i] = newDeck[i];
    70080:  225:    state->deckCount[player]++;
    70080:  226:  }
        -:  227:
     7008:  228:  return 0;
     7008:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      272:  280:  who = state->whoseTurn;
        -:  281:
      272:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
      136:  285:    return -1;
      136:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       68:  289:    return -1;
       68:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       68:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       68:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       68:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       68:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       68:  308:  return 0;
      272:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      612:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     8760:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
     8760:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     8760:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     8760:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     8760:  576:    state->deckCount[player]--;
     8760:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     8760:  580:  return 0;
     8760:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      612:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       36:  590:      return 2;
        -:  591:    case duchy:
       36:  592:      return 5;
        -:  593:    case province:
       36:  594:      return 8;
        -:  595:    case copper:
       36:  596:      return 0;
        -:  597:    case silver:
       36:  598:      return 3;
        -:  599:    case gold:
       36:  600:      return 6;
        -:  601:    case adventurer:
       72:  602:      return 6;
        -:  603:    case council_room:
       36:  604:      return 5;
        -:  605:    case feast:
       36:  606:      return 4;
        -:  607:    case gardens:
       36:  608:      return 4;
        -:  609:    case mine:
       36:  610:      return 5;
        -:  611:    case remodel:
       36:  612:      return 4;
        -:  613:    case smithy:
       36:  614:      return 4;
        -:  615:    case village:
       36:  616:      return 3;
        -:  617:    case baron:
       36:  618:      return 4;
        -:  619:    case great_hall:
       36:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      612:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int z = 0;// this is the counter for the temp hand
    #####:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
    #####:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
    #####:  669:            return adventurerEffect(&drawntreasure, state, &currentPlayer, &z, temphand);
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
    #####:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
    #####:  687:	    }
    #####:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
    #####:  708:	if (supplyCount(choice1, state) <= 0){
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
    #####:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
    #####:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
    #####:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
    #####:  752:            return mineEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  753:			
        -:  754:    case remodel:
    #####:  755:            return remodelEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  756:		
        -:  757:    case smithy:
    #####:  758:            return smithyEffect(state, &currentPlayer, handPos);
        -:  759:		
        -:  760:    case village:
        -:  761:        //+1 Card
    #####:  762:        drawCard(currentPlayer, state);
        -:  763:     
        -:  764:        //+2 Actions
    #####:  765:        state->numActions = state->numActions + 2;
        -:  766:     
        -:  767:        //discard played card from hand
    #####:  768:        discardCard(handPos, currentPlayer, state, 0);
    #####:  769:        return 0;
        -:  770:            
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    #####:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
    #####:  797:		isGameOver(state);
    #####:  798:	      }
    #####:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    #####:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
    #####:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
    #####:  814:	    isGameOver(state);
    #####:  815:	  }
    #####:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    #####:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    #####:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    #####:  876:			}
    #####:  877:		    }
    #####:  878:		}
    #####:  879:	    }
        -:  880:				
    #####:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
    #####:  885:            return stewardEffect(state, &currentPlayer, choice1, choice2, choice3, handPos);
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
    #####:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
    #####:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
    #####:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
    #####:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
    #####:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  932:	  state->coins += 2;
    #####:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
    #####:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  962:	    {
    #####:  963:	      j++;
    #####:  964:	    }
    #####:  965:	}
    #####:  966:      if (j < choice2)
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  983:	    }
    #####:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
    #####:  997:		  break;
        -:  998:		}
    #####:  999:	    }
    #####: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
    #####: 1027:		}
        -: 1028:					
    #####: 1029:	    }
        -: 1030:				
    #####: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
    #####: 1082:	if (i != currentPlayer){
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1086:	}
    #####: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (index > -1)
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
    #####: 1122:}
        -: 1123:
        -: 1124:int adventurerEffect(int *drawntreasure, struct gameState *state, int *currentPlayer, int *z, int *temphand){
    #####: 1125:    while((*drawntreasure)<2){
    #####: 1126:        if (state->deckCount[*currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1127:            shuffle(*currentPlayer, state);
    #####: 1128:        }
    #####: 1129:        drawCard(*currentPlayer, state);
    #####: 1130:        int cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1131:        if (cardDrawn == copper || cardDrawn == silver)
    #####: 1132:            (*drawntreasure)++;
        -: 1133:        else{
    #####: 1134:            temphand[(*z)]=cardDrawn;
    #####: 1135:            state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1136:            (*z)++;
        -: 1137:        }
        -: 1138:    }
    #####: 1139:    while((*z)-1>=0){
    #####: 1140:        state->discard[*currentPlayer][state->discardCount[*currentPlayer]++]=temphand[(*z)-1]; // discard all cards in play that have been drawn
    #####: 1141:        (*z)=(*z)-1;
        -: 1142:    }
    #####: 1143:    return 0;
        -: 1144:}
        -: 1145:
        -: 1146:int mineEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
    #####: 1147:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1148:    
    #####: 1149:    if (state->hand[*currentPlayer][choice1] < copper || state->hand[*currentPlayer][choice1] > gold)
        -: 1150:    {
    #####: 1151:        return -1;
        -: 1152:    }
        -: 1153:    
    #####: 1154:    if (choice2 > treasure_map)
        -: 1155:    {
    #####: 1156:        return -1;
        -: 1157:    }
        -: 1158:
    #####: 1159:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1160:    {
    #####: 1161:        return -1;
        -: 1162:    }
        -: 1163:    
    #####: 1164:    gainCard(choice2, state, 2, *currentPlayer);
        -: 1165:    
        -: 1166:    //discard card from hand
    #####: 1167:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1168:    
        -: 1169:    //discard trashed card
    #####: 1170:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1171:    {
    #####: 1172:        if (state->hand[*currentPlayer][i] == j)
        -: 1173:        {
    #####: 1174:            discardCard(i, *currentPlayer, state, 0);
    #####: 1175:            break;
        -: 1176:        }
    #####: 1177:    }
        -: 1178:    
    #####: 1179:    return 0;
    #####: 1180:}
        -: 1181:
        -: 1182:int remodelEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
    #####: 1183:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1184:    
    #####: 1185:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 1) > getCost(choice2) )
        -: 1186:    {
    #####: 1187:        return -1;
        -: 1188:    }
        -: 1189:    
    #####: 1190:    gainCard(choice2, state, 0, *currentPlayer);
        -: 1191:    
        -: 1192:    //discard card from hand
    #####: 1193:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1194:    
        -: 1195:    //discard trashed card
    #####: 1196:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1197:    {
    #####: 1198:        if (state->hand[*currentPlayer][i] == j)
        -: 1199:        {
    #####: 1200:            discardCard(i, *currentPlayer, state, 1);
    #####: 1201:            break;
        -: 1202:        }
    #####: 1203:    }
        -: 1204:    
        -: 1205:    
    #####: 1206:    return 0;
    #####: 1207:}
        -: 1208:
        -: 1209:int smithyEffect(struct gameState *state, int *currentPlayer, int handPos){
        -: 1210:    //+3 Cards
    #####: 1211:    for (int i = 0; i <= 3; i++)
        -: 1212:    {
    #####: 1213:        drawCard(*currentPlayer, state);
    #####: 1214:    }
        -: 1215:    
        -: 1216:    //discard card from hand
    #####: 1217:    discardCard(handPos, *currentPlayer, state,2);
    #####: 1218:    return 0;
        -: 1219:}
        -: 1220:
        -: 1221:int stewardEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int choice3, int handPos){
    #####: 1222:    if (choice1 == 1)
        -: 1223:    {
        -: 1224:        //+2 cards
    #####: 1225:        drawCard(*currentPlayer, state);
    #####: 1226:        drawCard(*currentPlayer, state);
    #####: 1227:    }
    #####: 1228:    else if (choice1 == 2)
        -: 1229:    {
        -: 1230:        //+2 coins
    #####: 1231:        state->coins = state->coins + 2;
    #####: 1232:    }
        -: 1233:    else
        -: 1234:    {
        -: 1235:        //trash 2 cards in hand
    #####: 1236:        discardCard(choice2, *currentPlayer, state, 1);
    #####: 1237:        discardCard(choice3, *currentPlayer, state, 1);
        -: 1238:    }
        -: 1239:    
        -: 1240:    //discard card from hand
    #####: 1241:    discardCard(handPos, *currentPlayer, state, 0);
    #####: 1242:    return 0;
        -: 1243:}
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
    #####: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to played pile
    #####: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1255:      state->playedCardCount++;
    #####: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
    #####: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
    #####: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
    #####: 1266:    }
    #####: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
    #####: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
    #####: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
    #####: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
    #####: 1282:  return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
      476: 1290:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1291:    {
      204: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
      272: 1300:  if (toFlag == 1)
        -: 1301:    {
       68: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       68: 1303:      state->deckCount[player]++;
       68: 1304:    }
      204: 1305:  else if (toFlag == 2)
        -: 1306:    {
       68: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       68: 1308:      state->handCount[player]++;
       68: 1309:    }
        -: 1310:  else
        -: 1311:    {
      136: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      136: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
      272: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
      272: 1319:  return 0;
      476: 1320:}
        -: 1321:
        -: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
     3096: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
    37152: 1330:  for (i = 0; i < state->handCount[player]; i++)
        -: 1331:    {
    15480: 1332:      if (state->hand[player][i] == copper)
        -: 1333:	{
     8688: 1334:	  state->coins += 1;
     8688: 1335:	}
     6792: 1336:      else if (state->hand[player][i] == silver)
        -: 1337:	{
     1680: 1338:	  state->coins += 2;
     1680: 1339:	}
     5112: 1340:      else if (state->hand[player][i] == gold)
        -: 1341:	{
     1680: 1342:	  state->coins += 3;
     1680: 1343:	}	
    15480: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
     3096: 1347:  state->coins += bonus;
        -: 1348:
     3096: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:int customAssert(bool test){
     2976: 1353:    if (test == false){
    #####: 1354:        printf("TEST FAILED\n");
    #####: 1355:        return 1;
        -: 1356:    }
        -: 1357:    else{
     2976: 1358:        printf("TEST SUCCESSFULLY COMPLETED\n");
     2976: 1359:        return 0;
        -: 1360:    }
     2976: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
----------------- Testing Function: fullDeckCount() ----------------
Test player 0, card 7, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 7, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 8, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 9, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 10, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 11, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 12, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 13, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 14, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 16, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 2, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 3, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 4, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 5, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 6, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 0, card 1, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 7, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 8, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 9, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 10, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 11, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 12, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 13, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 14, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 16, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 2, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 3, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 4, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 5, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 6, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 1, card 1, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 7, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 8, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 9, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 10, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 11, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 12, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 13, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 14, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 16, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 2, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 3, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 4, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 5, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 6, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 2, card 1, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 7, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 8, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 9, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 10, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 11, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 12, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 13, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 14, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 16, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 2, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 3, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 4, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 5, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 6, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 0 hand, and 0 discard. 
G.cards = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 0 hand, and 5 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 0 hand, and 10 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 0 hand, and 15 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 0 hand, and 20 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 0 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 0 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 0 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 0 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 0 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 0 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 0 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 0 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 0 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 0 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 0 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 0 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 0 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 0 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 0 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 0 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 0 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 0 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 0 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 0 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 5 hand, and 0 discard. 
G.cards = 5, expected = 5
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 5 hand, and 5 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 5 hand, and 10 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 5 hand, and 15 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 5 hand, and 20 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 5 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 5 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 5 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 5 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 5 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 5 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 5 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 5 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 5 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 5 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 5 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 5 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 5 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 5 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 5 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 5 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 5 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 5 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 5 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 5 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 10 hand, and 0 discard. 
G.cards = 10, expected = 10
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 10 hand, and 5 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 10 hand, and 10 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 10 hand, and 15 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 10 hand, and 20 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 10 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 10 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 10 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 10 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 10 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 10 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 10 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 10 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 10 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 10 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 10 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 10 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 10 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 10 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 10 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 10 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 10 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 10 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 10 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 10 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 15 hand, and 0 discard. 
G.cards = 15, expected = 15
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 15 hand, and 5 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 15 hand, and 10 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 15 hand, and 15 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 15 hand, and 20 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 15 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 15 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 15 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 15 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 15 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 15 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 15 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 15 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 15 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 15 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 15 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 15 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 15 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 15 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 15 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 15 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 15 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 15 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 15 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 15 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 20 hand, and 0 discard. 
G.cards = 20, expected = 20
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 20 hand, and 5 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 20 hand, and 10 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 20 hand, and 15 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 0 deck, 20 hand, and 20 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 20 hand, and 0 discard. 
G.cards = 25, expected = 25
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 20 hand, and 5 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 20 hand, and 10 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 20 hand, and 15 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 5 deck, 20 hand, and 20 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 20 hand, and 0 discard. 
G.cards = 30, expected = 30
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 20 hand, and 5 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 20 hand, and 10 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 20 hand, and 15 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 10 deck, 20 hand, and 20 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 20 hand, and 0 discard. 
G.cards = 35, expected = 35
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 20 hand, and 5 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 20 hand, and 10 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 20 hand, and 15 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 15 deck, 20 hand, and 20 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 20 hand, and 0 discard. 
G.cards = 40, expected = 40
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 20 hand, and 5 discard. 
G.cards = 45, expected = 45
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 20 hand, and 10 discard. 
G.cards = 50, expected = 50
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 20 hand, and 15 discard. 
G.cards = 55, expected = 55
TEST SUCCESSFULLY COMPLETED
Test player 3, card 1, with 20 deck, 20 hand, and 20 discard. 
G.cards = 60, expected = 60
TEST SUCCESSFULLY COMPLETED

 >>>>> SUCCESS: Testing complete fullDeckCount() <<<<<

File 'dominion.c'
Lines executed:26.07% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   546112:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
   546112:   11:  if (*(int*)a < *(int*)b)
   195040:   12:    return -1;
   351072:   13:  return 0;
   546112:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     9752:   44:  SelectStream(1);
     9752:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    19504:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     9752:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   214544:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  2145440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1852880:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   975200:   65:        }
    97520:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     9752:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
     9752:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
     9752:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     9752:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
     9752:   95:      state->supplyCount[estate] = 12;
     9752:   96:      state->supplyCount[duchy] = 12;
     9752:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     9752:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     9752:  102:  state->supplyCount[silver] = 40;
     9752:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   409584:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  3218160:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1511560:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   185288:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    19504:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    19504:  118:		  else{ state->supplyCount[i] = 12; }
    19504:  119:		}
        -:  120:	      else
        -:  121:		{
    78016:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    97520:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1414040:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  1414040:  130:	}
        -:  131:
   195040:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    97520:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    39008:  140:      state->deckCount[i] = 0;
   312064:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
   117024:  143:	  state->deck[i][j] = estate;
   117024:  144:	  state->deckCount[i]++;
   117024:  145:	}
   624128:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   273056:  148:	  state->deck[i][j] = copper;
   273056:  149:	  state->deckCount[i]++;		
   273056:  150:	}
    39008:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    97520:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    39008:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    39008:  160:    }
        -:  161:
        -:  162:  //draw player hands
    97520:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    39008:  166:      state->handCount[i] = 0;
    39008:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    39008:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   546112:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   263304:  178:      state->embargoTokens[i] = 0;
   263304:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     9752:  182:  state->outpostPlayed = 0;
     9752:  183:  state->phase = 0;
     9752:  184:  state->numActions = 1;
     9752:  185:  state->numBuys = 1;
     9752:  186:  state->playedCardCount = 0;
     9752:  187:  state->whoseTurn = 0;
     9752:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   117024:  192:  for (it = 0; it < 5; it++){
    48760:  193:    drawCard(state->whoseTurn, state);
    48760:  194:  }
        -:  195:
     9752:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     9752:  198:  return 0;
     9752:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    39008:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    39008:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    39008:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   858176:  214:  while (state->deckCount[player] > 0) {
   390080:  215:    card = floor(Random() * state->deckCount[player]);
   390080:  216:    newDeck[newDeckPos] = state->deck[player][card];
   390080:  217:    newDeckPos++;
  2711056:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   965448:  219:      state->deck[player][i] = state->deck[player][i+1];
   965448:  220:    }
   390080:  221:    state->deckCount[player]--;
        -:  222:  }
   858176:  223:  for (i = 0; i < newDeckPos; i++) {
   390080:  224:    state->deck[player][i] = newDeck[i];
   390080:  225:    state->deckCount[player]++;
   390080:  226:  }
        -:  227:
    39008:  228:  return 0;
    39008:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      272:  280:  who = state->whoseTurn;
        -:  281:
      272:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
      136:  285:    return -1;
      136:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       68:  289:    return -1;
       68:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       68:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       68:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       68:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       68:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       68:  308:  return 0;
      272:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      612:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     8000:  326:  int count = 0;
        -:  327:
   336000:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
   240000:  330:      if (state->deck[player][i] == card) count++;
   160000:  331:    }
        -:  332:
   336000:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
   240000:  335:      if (state->hand[player][i] == card) count++;
   160000:  336:    }
        -:  337:
   336000:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
   240000:  340:      if (state->discard[player][i] == card) count++;
   160000:  341:    }
        -:  342:
     8000:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    48760:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
    48760:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    48760:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    48760:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    48760:  576:    state->deckCount[player]--;
    48760:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    48760:  580:  return 0;
    48760:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      612:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       36:  590:      return 2;
        -:  591:    case duchy:
       36:  592:      return 5;
        -:  593:    case province:
       36:  594:      return 8;
        -:  595:    case copper:
       36:  596:      return 0;
        -:  597:    case silver:
       36:  598:      return 3;
        -:  599:    case gold:
       36:  600:      return 6;
        -:  601:    case adventurer:
       72:  602:      return 6;
        -:  603:    case council_room:
       36:  604:      return 5;
        -:  605:    case feast:
       36:  606:      return 4;
        -:  607:    case gardens:
       36:  608:      return 4;
        -:  609:    case mine:
       36:  610:      return 5;
        -:  611:    case remodel:
       36:  612:      return 4;
        -:  613:    case smithy:
       36:  614:      return 4;
        -:  615:    case village:
       36:  616:      return 3;
        -:  617:    case baron:
       36:  618:      return 4;
        -:  619:    case great_hall:
       36:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      612:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int z = 0;// this is the counter for the temp hand
    #####:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
    #####:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
    #####:  669:            return adventurerEffect(&drawntreasure, state, &currentPlayer, &z, temphand);
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
    #####:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
    #####:  687:	    }
    #####:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
    #####:  708:	if (supplyCount(choice1, state) <= 0){
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
    #####:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
    #####:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
    #####:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
    #####:  752:            return mineEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  753:			
        -:  754:    case remodel:
    #####:  755:            return remodelEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  756:		
        -:  757:    case smithy:
    #####:  758:            return smithyEffect(state, &currentPlayer, handPos);
        -:  759:		
        -:  760:    case village:
        -:  761:        //+1 Card
    #####:  762:        drawCard(currentPlayer, state);
        -:  763:     
        -:  764:        //+2 Actions
    #####:  765:        state->numActions = state->numActions + 2;
        -:  766:     
        -:  767:        //discard played card from hand
    #####:  768:        discardCard(handPos, currentPlayer, state, 0);
    #####:  769:        return 0;
        -:  770:            
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    #####:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
    #####:  797:		isGameOver(state);
    #####:  798:	      }
    #####:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    #####:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
    #####:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
    #####:  814:	    isGameOver(state);
    #####:  815:	  }
    #####:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    #####:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    #####:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    #####:  876:			}
    #####:  877:		    }
    #####:  878:		}
    #####:  879:	    }
        -:  880:				
    #####:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
    #####:  885:            return stewardEffect(state, &currentPlayer, choice1, choice2, choice3, handPos);
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
    #####:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
    #####:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
    #####:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
    #####:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
    #####:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  932:	  state->coins += 2;
    #####:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
    #####:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  962:	    {
    #####:  963:	      j++;
    #####:  964:	    }
    #####:  965:	}
    #####:  966:      if (j < choice2)
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  983:	    }
    #####:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
    #####:  997:		  break;
        -:  998:		}
    #####:  999:	    }
    #####: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
    #####: 1027:		}
        -: 1028:					
    #####: 1029:	    }
        -: 1030:				
    #####: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
    #####: 1082:	if (i != currentPlayer){
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1086:	}
    #####: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (index > -1)
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
    #####: 1122:}
        -: 1123:
        -: 1124:int adventurerEffect(int *drawntreasure, struct gameState *state, int *currentPlayer, int *z, int *temphand){
    #####: 1125:    while((*drawntreasure)<2){
    #####: 1126:        if (state->deckCount[*currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1127:            shuffle(*currentPlayer, state);
    #####: 1128:        }
    #####: 1129:        drawCard(*currentPlayer, state);
    #####: 1130:        int cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1131:        if (cardDrawn == copper || cardDrawn == silver)
    #####: 1132:            (*drawntreasure)++;
        -: 1133:        else{
    #####: 1134:            temphand[(*z)]=cardDrawn;
    #####: 1135:            state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1136:            (*z)++;
        -: 1137:        }
        -: 1138:    }
    #####: 1139:    while((*z)-1>=0){
    #####: 1140:        state->discard[*currentPlayer][state->discardCount[*currentPlayer]++]=temphand[(*z)-1]; // discard all cards in play that have been drawn
    #####: 1141:        (*z)=(*z)-1;
        -: 1142:    }
    #####: 1143:    return 0;
        -: 1144:}
        -: 1145:
        -: 1146:int mineEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
    #####: 1147:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1148:    
    #####: 1149:    if (state->hand[*currentPlayer][choice1] < copper || state->hand[*currentPlayer][choice1] > gold)
        -: 1150:    {
    #####: 1151:        return -1;
        -: 1152:    }
        -: 1153:    
    #####: 1154:    if (choice2 > treasure_map)
        -: 1155:    {
    #####: 1156:        return -1;
        -: 1157:    }
        -: 1158:
    #####: 1159:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1160:    {
    #####: 1161:        return -1;
        -: 1162:    }
        -: 1163:    
    #####: 1164:    gainCard(choice2, state, 2, *currentPlayer);
        -: 1165:    
        -: 1166:    //discard card from hand
    #####: 1167:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1168:    
        -: 1169:    //discard trashed card
    #####: 1170:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1171:    {
    #####: 1172:        if (state->hand[*currentPlayer][i] == j)
        -: 1173:        {
    #####: 1174:            discardCard(i, *currentPlayer, state, 0);
    #####: 1175:            break;
        -: 1176:        }
    #####: 1177:    }
        -: 1178:    
    #####: 1179:    return 0;
    #####: 1180:}
        -: 1181:
        -: 1182:int remodelEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
    #####: 1183:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1184:    
    #####: 1185:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 1) > getCost(choice2) )
        -: 1186:    {
    #####: 1187:        return -1;
        -: 1188:    }
        -: 1189:    
    #####: 1190:    gainCard(choice2, state, 0, *currentPlayer);
        -: 1191:    
        -: 1192:    //discard card from hand
    #####: 1193:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1194:    
        -: 1195:    //discard trashed card
    #####: 1196:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1197:    {
    #####: 1198:        if (state->hand[*currentPlayer][i] == j)
        -: 1199:        {
    #####: 1200:            discardCard(i, *currentPlayer, state, 1);
    #####: 1201:            break;
        -: 1202:        }
    #####: 1203:    }
        -: 1204:    
        -: 1205:    
    #####: 1206:    return 0;
    #####: 1207:}
        -: 1208:
        -: 1209:int smithyEffect(struct gameState *state, int *currentPlayer, int handPos){
        -: 1210:    //+3 Cards
    #####: 1211:    for (int i = 0; i <= 3; i++)
        -: 1212:    {
    #####: 1213:        drawCard(*currentPlayer, state);
    #####: 1214:    }
        -: 1215:    
        -: 1216:    //discard card from hand
    #####: 1217:    discardCard(handPos, *currentPlayer, state,2);
    #####: 1218:    return 0;
        -: 1219:}
        -: 1220:
        -: 1221:int stewardEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int choice3, int handPos){
    #####: 1222:    if (choice1 == 1)
        -: 1223:    {
        -: 1224:        //+2 cards
    #####: 1225:        drawCard(*currentPlayer, state);
    #####: 1226:        drawCard(*currentPlayer, state);
    #####: 1227:    }
    #####: 1228:    else if (choice1 == 2)
        -: 1229:    {
        -: 1230:        //+2 coins
    #####: 1231:        state->coins = state->coins + 2;
    #####: 1232:    }
        -: 1233:    else
        -: 1234:    {
        -: 1235:        //trash 2 cards in hand
    #####: 1236:        discardCard(choice2, *currentPlayer, state, 1);
    #####: 1237:        discardCard(choice3, *currentPlayer, state, 1);
        -: 1238:    }
        -: 1239:    
        -: 1240:    //discard card from hand
    #####: 1241:    discardCard(handPos, *currentPlayer, state, 0);
    #####: 1242:    return 0;
        -: 1243:}
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
    #####: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to played pile
    #####: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1255:      state->playedCardCount++;
    #####: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
    #####: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
    #####: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
    #####: 1266:    }
    #####: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
    #####: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
    #####: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
    #####: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
    #####: 1282:  return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
      476: 1290:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1291:    {
      204: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
      272: 1300:  if (toFlag == 1)
        -: 1301:    {
       68: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       68: 1303:      state->deckCount[player]++;
       68: 1304:    }
      204: 1305:  else if (toFlag == 2)
        -: 1306:    {
       68: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       68: 1308:      state->handCount[player]++;
       68: 1309:    }
        -: 1310:  else
        -: 1311:    {
      136: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      136: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
      272: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
      272: 1319:  return 0;
      476: 1320:}
        -: 1321:
        -: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
    11096: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
   133152: 1330:  for (i = 0; i < state->handCount[player]; i++)
        -: 1331:    {
    55480: 1332:      if (state->hand[player][i] == copper)
        -: 1333:	{
    40688: 1334:	  state->coins += 1;
    40688: 1335:	}
    14792: 1336:      else if (state->hand[player][i] == silver)
        -: 1337:	{
     1680: 1338:	  state->coins += 2;
     1680: 1339:	}
    13112: 1340:      else if (state->hand[player][i] == gold)
        -: 1341:	{
     1680: 1342:	  state->coins += 3;
     1680: 1343:	}	
    55480: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
    11096: 1347:  state->coins += bonus;
        -: 1348:
    11096: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:int customAssert(bool test){
    10976: 1353:    if (test == false){
    #####: 1354:        printf("TEST FAILED\n");
    #####: 1355:        return 1;
        -: 1356:    }
        -: 1357:    else{
    10976: 1358:        printf("TEST SUCCESSFULLY COMPLETED\n");
    10976: 1359:        return 0;
        -: 1360:    }
    10976: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
----------------- Testing Card: mine ----------------
TEST 1: = 4 card for 7
New card cost = 6, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 2: = 4 card for 8
New card cost = 5, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 3: = 4 card for 9
New card cost = 4, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 4: = 4 card for 10
New card cost = 4, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 5: = 4 card for 11
New card cost = 5, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 6: = 4 card for 12
New card cost = 4, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 7: = 4 card for 13
New card cost = 4, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 8: = 4 card for 14
New card cost = 3, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 9
Old card still in hand = 0, expected = 0
New card in hand = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 9: = 4 card for 15
New card cost = 4, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 10: = 4 card for 16
New card cost = 3, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 9
Old card still in hand = 0, expected = 0
New card in hand = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 11: = 4 card for 2
New card cost = 5, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 12: = 4 card for 3
New card cost = 8, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 13: = 4 card for 4
New card cost = 0, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 1
New card in hand = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 14: = 4 card for 5
New card cost = 3, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 9
Old card still in hand = 0, expected = 0
New card in hand = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 15: = 4 card for 6
New card cost = 6, max cost = 3
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 16: = 5 card for 7
New card cost = 6, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 9
Old card still in hand = 0, expected = 0
New card in hand = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 17: = 5 card for 8
New card cost = 5, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 18: = 5 card for 9
New card cost = 4, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 19: = 5 card for 10
New card cost = 4, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 20: = 5 card for 11
New card cost = 5, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 21: = 5 card for 12
New card cost = 4, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 22: = 5 card for 13
New card cost = 4, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 23: = 5 card for 14
New card cost = 3, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 24: = 5 card for 15
New card cost = 4, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 25: = 5 card for 16
New card cost = 3, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 26: = 5 card for 2
New card cost = 5, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 27: = 5 card for 3
New card cost = 8, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 10
Old card still in hand = 0, expected = 1
New card in hand = 1, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 28: = 5 card for 4
New card cost = 0, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 29: = 5 card for 5
New card cost = 3, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 1
New card in hand = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 30: = 5 card for 6
New card cost = 6, max cost = 6
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 9, expected = 9
Old card still in hand = 0, expected = 0
New card in hand = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 31: = 6 card for 7
New card cost = 6, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 32: = 6 card for 8
New card cost = 5, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 33: = 6 card for 9
New card cost = 4, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 34: = 6 card for 10
New card cost = 4, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 35: = 6 card for 11
New card cost = 5, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 36: = 6 card for 12
New card cost = 4, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 37: = 6 card for 13
New card cost = 4, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 38: = 6 card for 14
New card cost = 3, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 39: = 6 card for 15
New card cost = 4, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 40: = 6 card for 16
New card cost = 3, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 41: = 6 card for 2
New card cost = 5, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 42: = 6 card for 3
New card cost = 8, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 43: = 6 card for 4
New card cost = 0, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 44: = 6 card for 5
New card cost = 3, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 0
New card in hand = 0, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 45: = 6 card for 6
New card cost = 6, max cost = 9
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 9
Old card still in hand = 1, expected = 1
New card in hand = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 46: = 9 card for 7
New card cost = 6, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 47: = 9 card for 8
New card cost = 5, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 48: = 9 card for 9
New card cost = 4, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 1, expected = 1
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 49: = 9 card for 10
New card cost = 4, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 50: = 9 card for 11
New card cost = 5, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 51: = 9 card for 12
New card cost = 4, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 52: = 9 card for 13
New card cost = 4, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 53: = 9 card for 14
New card cost = 3, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 54: = 9 card for 15
New card cost = 4, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 55: = 9 card for 16
New card cost = 3, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 56: = 9 card for 2
New card cost = 5, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 57: = 9 card for 3
New card cost = 8, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 58: = 9 card for 4
New card cost = 0, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 59: = 9 card for 5
New card cost = 3, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 60: = 9 card for 6
New card cost = 6, max cost = 7
hand count = 5, expected = 5
deck count = 5, expected = 5
discard count = 0, expected = 0
card supply = 10, expected = 10
Old card still in hand = 1, expected = 1
New card in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED


 >>>>> FAILURE: Testing complete mine <<<<<

File 'dominion.c'
Lines executed:32.52% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   546140:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
   546140:   11:  if (*(int*)a < *(int*)b)
   195050:   12:    return -1;
   351090:   13:  return 0;
   546140:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     9753:   44:  SelectStream(1);
     9753:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    19506:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     9753:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   214566:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  2145660:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1853070:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   975300:   65:        }
    97530:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     9753:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        1:   76:    }
     9752:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
     9752:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     9753:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        1:   92:    }
        -:   93:  else
        -:   94:    {
     9752:   95:      state->supplyCount[estate] = 12;
     9752:   96:      state->supplyCount[duchy] = 12;
     9752:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     9753:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     9753:  102:  state->supplyCount[silver] = 40;
     9753:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   409626:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  3218490:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1511715:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   185308:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    19504:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    19504:  118:		  else{ state->supplyCount[i] = 12; }
    19504:  119:		}
        -:  120:	      else
        -:  121:		{
    78026:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    97530:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1414185:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  1414185:  130:	}
        -:  131:
   195060:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    97526:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    39010:  140:      state->deckCount[i] = 0;
   312080:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
   117030:  143:	  state->deck[i][j] = estate;
   117030:  144:	  state->deckCount[i]++;
   117030:  145:	}
   624160:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   273070:  148:	  state->deck[i][j] = copper;
   273070:  149:	  state->deckCount[i]++;		
   273070:  150:	}
    39010:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    97526:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    39010:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    39010:  160:    }
        -:  161:
        -:  162:  //draw player hands
    97526:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    39010:  166:      state->handCount[i] = 0;
    39010:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    39010:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   546168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   263331:  178:      state->embargoTokens[i] = 0;
   263331:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     9753:  182:  state->outpostPlayed = 0;
     9753:  183:  state->phase = 0;
     9753:  184:  state->numActions = 1;
     9753:  185:  state->numBuys = 1;
     9753:  186:  state->playedCardCount = 0;
     9753:  187:  state->whoseTurn = 0;
     9753:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   117036:  192:  for (it = 0; it < 5; it++){
    48765:  193:    drawCard(state->whoseTurn, state);
    48765:  194:  }
        -:  195:
     9753:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     9753:  198:  return 0;
     9753:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    39010:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    39010:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    39010:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   858220:  214:  while (state->deckCount[player] > 0) {
   390100:  215:    card = floor(Random() * state->deckCount[player]);
   390100:  216:    newDeck[newDeckPos] = state->deck[player][card];
   390100:  217:    newDeckPos++;
  2711196:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   965498:  219:      state->deck[player][i] = state->deck[player][i+1];
   965498:  220:    }
   390100:  221:    state->deckCount[player]--;
        -:  222:  }
   858220:  223:  for (i = 0; i < newDeckPos; i++) {
   390100:  224:    state->deck[player][i] = newDeck[i];
   390100:  225:    state->deckCount[player]++;
   390100:  226:  }
        -:  227:
    39010:  228:  return 0;
    39010:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      272:  280:  who = state->whoseTurn;
        -:  281:
      272:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
      136:  285:    return -1;
      136:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       68:  289:    return -1;
       68:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       68:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       68:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       68:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       68:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       68:  308:  return 0;
      272:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      629:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     8000:  326:  int count = 0;
        -:  327:
   336000:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
   240000:  330:      if (state->deck[player][i] == card) count++;
   160000:  331:    }
        -:  332:
   336000:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
   240000:  335:      if (state->hand[player][i] == card) count++;
   160000:  336:    }
        -:  337:
   336000:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
   240000:  340:      if (state->discard[player][i] == card) count++;
   160000:  341:    }
        -:  342:
     8000:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       60:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    48765:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
    48765:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    48765:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    48765:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    48765:  576:    state->deckCount[player]--;
    48765:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    48765:  580:  return 0;
    48765:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      942:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       36:  590:      return 2;
        -:  591:    case duchy:
       47:  592:      return 5;
        -:  593:    case province:
       47:  594:      return 8;
        -:  595:    case copper:
       92:  596:      return 0;
        -:  597:    case silver:
       92:  598:      return 3;
        -:  599:    case gold:
       92:  600:      return 6;
        -:  601:    case adventurer:
       83:  602:      return 6;
        -:  603:    case council_room:
       47:  604:      return 5;
        -:  605:    case feast:
       77:  606:      return 4;
        -:  607:    case gardens:
       47:  608:      return 4;
        -:  609:    case mine:
       47:  610:      return 5;
        -:  611:    case remodel:
       47:  612:      return 4;
        -:  613:    case smithy:
       47:  614:      return 4;
        -:  615:    case village:
       47:  616:      return 3;
        -:  617:    case baron:
       47:  618:      return 4;
        -:  619:    case great_hall:
       47:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      942:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       60:  653:  int currentPlayer = whoseTurn(state);
       60:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       60:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       60:  658:  int drawntreasure=0;
       60:  659:  int z = 0;// this is the counter for the temp hand
       60:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
       60:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
    #####:  669:            return adventurerEffect(&drawntreasure, state, &currentPlayer, &z, temphand);
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
    #####:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
    #####:  687:	    }
    #####:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
    #####:  708:	if (supplyCount(choice1, state) <= 0){
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
    #####:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
    #####:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
    #####:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
       60:  752:            return mineEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  753:			
        -:  754:    case remodel:
    #####:  755:            return remodelEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  756:		
        -:  757:    case smithy:
    #####:  758:            return smithyEffect(state, &currentPlayer, handPos);
        -:  759:		
        -:  760:    case village:
        -:  761:        //+1 Card
    #####:  762:        drawCard(currentPlayer, state);
        -:  763:     
        -:  764:        //+2 Actions
    #####:  765:        state->numActions = state->numActions + 2;
        -:  766:     
        -:  767:        //discard played card from hand
    #####:  768:        discardCard(handPos, currentPlayer, state, 0);
    #####:  769:        return 0;
        -:  770:            
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    #####:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
    #####:  797:		isGameOver(state);
    #####:  798:	      }
    #####:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    #####:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
    #####:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
    #####:  814:	    isGameOver(state);
    #####:  815:	  }
    #####:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    #####:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    #####:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    #####:  876:			}
    #####:  877:		    }
    #####:  878:		}
    #####:  879:	    }
        -:  880:				
    #####:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
    #####:  885:            return stewardEffect(state, &currentPlayer, choice1, choice2, choice3, handPos);
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
    #####:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
    #####:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
    #####:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
    #####:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
    #####:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  932:	  state->coins += 2;
    #####:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
    #####:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  962:	    {
    #####:  963:	      j++;
    #####:  964:	    }
    #####:  965:	}
    #####:  966:      if (j < choice2)
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  983:	    }
    #####:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
    #####:  997:		  break;
        -:  998:		}
    #####:  999:	    }
    #####: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
    #####: 1027:		}
        -: 1028:					
    #####: 1029:	    }
        -: 1030:				
    #####: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
    #####: 1082:	if (i != currentPlayer){
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1086:	}
    #####: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (index > -1)
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
       60: 1122:}
        -: 1123:
        -: 1124:int adventurerEffect(int *drawntreasure, struct gameState *state, int *currentPlayer, int *z, int *temphand){
    #####: 1125:    while((*drawntreasure)<2){
    #####: 1126:        if (state->deckCount[*currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1127:            shuffle(*currentPlayer, state);
    #####: 1128:        }
    #####: 1129:        drawCard(*currentPlayer, state);
    #####: 1130:        int cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1131:        if (cardDrawn == copper || cardDrawn == silver)
    #####: 1132:            (*drawntreasure)++;
        -: 1133:        else{
    #####: 1134:            temphand[(*z)]=cardDrawn;
    #####: 1135:            state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1136:            (*z)++;
        -: 1137:        }
        -: 1138:    }
    #####: 1139:    while((*z)-1>=0){
    #####: 1140:        state->discard[*currentPlayer][state->discardCount[*currentPlayer]++]=temphand[(*z)-1]; // discard all cards in play that have been drawn
    #####: 1141:        (*z)=(*z)-1;
        -: 1142:    }
    #####: 1143:    return 0;
        -: 1144:}
        -: 1145:
        -: 1146:int mineEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
       60: 1147:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1148:    
      120: 1149:    if (state->hand[*currentPlayer][choice1] < copper || state->hand[*currentPlayer][choice1] > gold)
        -: 1150:    {
       15: 1151:        return -1;
        -: 1152:    }
        -: 1153:    
       45: 1154:    if (choice2 > treasure_map)
        -: 1155:    {
    #####: 1156:        return -1;
        -: 1157:    }
        -: 1158:
       45: 1159:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1160:    {
       28: 1161:        return -1;
        -: 1162:    }
        -: 1163:    
       17: 1164:    gainCard(choice2, state, 2, *currentPlayer);
        -: 1165:    
        -: 1166:    //discard card from hand
       17: 1167:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1168:    
        -: 1169:    //discard trashed card
      204: 1170:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1171:    {
       85: 1172:        if (state->hand[*currentPlayer][i] == j)
        -: 1173:        {
    #####: 1174:            discardCard(i, *currentPlayer, state, 0);
    #####: 1175:            break;
        -: 1176:        }
       85: 1177:    }
        -: 1178:    
       17: 1179:    return 0;
       60: 1180:}
        -: 1181:
        -: 1182:int remodelEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
    #####: 1183:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1184:    
    #####: 1185:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 1) > getCost(choice2) )
        -: 1186:    {
    #####: 1187:        return -1;
        -: 1188:    }
        -: 1189:    
    #####: 1190:    gainCard(choice2, state, 0, *currentPlayer);
        -: 1191:    
        -: 1192:    //discard card from hand
    #####: 1193:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1194:    
        -: 1195:    //discard trashed card
    #####: 1196:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1197:    {
    #####: 1198:        if (state->hand[*currentPlayer][i] == j)
        -: 1199:        {
    #####: 1200:            discardCard(i, *currentPlayer, state, 1);
    #####: 1201:            break;
        -: 1202:        }
    #####: 1203:    }
        -: 1204:    
        -: 1205:    
    #####: 1206:    return 0;
    #####: 1207:}
        -: 1208:
        -: 1209:int smithyEffect(struct gameState *state, int *currentPlayer, int handPos){
        -: 1210:    //+3 Cards
    #####: 1211:    for (int i = 0; i <= 3; i++)
        -: 1212:    {
    #####: 1213:        drawCard(*currentPlayer, state);
    #####: 1214:    }
        -: 1215:    
        -: 1216:    //discard card from hand
    #####: 1217:    discardCard(handPos, *currentPlayer, state,2);
    #####: 1218:    return 0;
        -: 1219:}
        -: 1220:
        -: 1221:int stewardEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int choice3, int handPos){
    #####: 1222:    if (choice1 == 1)
        -: 1223:    {
        -: 1224:        //+2 cards
    #####: 1225:        drawCard(*currentPlayer, state);
    #####: 1226:        drawCard(*currentPlayer, state);
    #####: 1227:    }
    #####: 1228:    else if (choice1 == 2)
        -: 1229:    {
        -: 1230:        //+2 coins
    #####: 1231:        state->coins = state->coins + 2;
    #####: 1232:    }
        -: 1233:    else
        -: 1234:    {
        -: 1235:        //trash 2 cards in hand
    #####: 1236:        discardCard(choice2, *currentPlayer, state, 1);
    #####: 1237:        discardCard(choice3, *currentPlayer, state, 1);
        -: 1238:    }
        -: 1239:    
        -: 1240:    //discard card from hand
    #####: 1241:    discardCard(handPos, *currentPlayer, state, 0);
    #####: 1242:    return 0;
        -: 1243:}
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
       17: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to played pile
       17: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       17: 1255:      state->playedCardCount++;
       17: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
       17: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
       17: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
    #####: 1266:    }
       17: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
    #####: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
       17: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
       17: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
       17: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
       17: 1282:  return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
      493: 1290:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1291:    {
      204: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
      289: 1300:  if (toFlag == 1)
        -: 1301:    {
       68: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       68: 1303:      state->deckCount[player]++;
       68: 1304:    }
      221: 1305:  else if (toFlag == 2)
        -: 1306:    {
       85: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       85: 1308:      state->handCount[player]++;
       85: 1309:    }
        -: 1310:  else
        -: 1311:    {
      136: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      136: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
      289: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
      289: 1319:  return 0;
      493: 1320:}
        -: 1321:
        -: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
    11097: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
   133164: 1330:  for (i = 0; i < state->handCount[player]; i++)
        -: 1331:    {
    55485: 1332:      if (state->hand[player][i] == copper)
        -: 1333:	{
    40692: 1334:	  state->coins += 1;
    40692: 1335:	}
    14793: 1336:      else if (state->hand[player][i] == silver)
        -: 1337:	{
     1680: 1338:	  state->coins += 2;
     1680: 1339:	}
    13113: 1340:      else if (state->hand[player][i] == gold)
        -: 1341:	{
     1680: 1342:	  state->coins += 3;
     1680: 1343:	}	
    55485: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
    11097: 1347:  state->coins += bonus;
        -: 1348:
    11097: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:int customAssert(bool test){
    11336: 1353:    if (test == false){
      114: 1354:        printf("TEST FAILED\n");
      114: 1355:        return 1;
        -: 1356:    }
        -: 1357:    else{
    11222: 1358:        printf("TEST SUCCESSFULLY COMPLETED\n");
    11222: 1359:        return 0;
        -: 1360:    }
    11336: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
----------------- Testing Card: remodel ----------------
TEST 1: = 7 card for 7
card cost = 6, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 2: = 7 card for 8
card cost = 5, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 3: = 7 card for 9
card cost = 4, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 4: = 7 card for 10
card cost = 4, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 5: = 7 card for 11
card cost = 5, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 6: = 7 card for 12
card cost = 4, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 7: = 7 card for 13
card cost = 4, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 8: = 7 card for 14
card cost = 3, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 9: = 7 card for 15
card cost = 4, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 10: = 7 card for 16
card cost = 3, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 11: = 7 card for 2
card cost = 5, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 12: = 7 card for 3
card cost = 8, max allowed = 8
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 13: = 7 card for 4
card cost = 0, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 14: = 7 card for 5
card cost = 3, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 15: = 7 card for 6
card cost = 6, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 16: = 8 card for 7
card cost = 6, max allowed = 7
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 17: = 8 card for 8
card cost = 5, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 18: = 8 card for 9
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 19: = 8 card for 10
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 20: = 8 card for 11
card cost = 5, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 21: = 8 card for 12
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 22: = 8 card for 13
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 23: = 8 card for 14
card cost = 3, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 24: = 8 card for 15
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 25: = 8 card for 16
card cost = 3, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 26: = 8 card for 2
card cost = 5, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 27: = 8 card for 3
card cost = 8, max allowed = 7
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 28: = 8 card for 4
card cost = 0, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 29: = 8 card for 5
card cost = 3, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 30: = 8 card for 6
card cost = 6, max allowed = 7
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 31: = 9 card for 7
card cost = 6, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 32: = 9 card for 8
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 33: = 9 card for 9
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 34: = 9 card for 10
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 35: = 9 card for 11
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 36: = 9 card for 12
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 37: = 9 card for 13
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 38: = 9 card for 14
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 39: = 9 card for 15
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 40: = 9 card for 16
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 41: = 9 card for 2
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 42: = 9 card for 3
card cost = 8, max allowed = 6
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 43: = 9 card for 4
card cost = 0, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 44: = 9 card for 5
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 45: = 9 card for 6
card cost = 6, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 46: = 10 card for 7
card cost = 6, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 47: = 10 card for 8
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 48: = 10 card for 9
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 49: = 10 card for 10
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 50: = 10 card for 11
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 51: = 10 card for 12
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 52: = 10 card for 13
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 53: = 10 card for 14
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 54: = 10 card for 15
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 55: = 10 card for 16
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 56: = 10 card for 2
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 57: = 10 card for 3
card cost = 8, max allowed = 6
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 58: = 10 card for 4
card cost = 0, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 59: = 10 card for 5
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 60: = 10 card for 6
card cost = 6, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 61: = 11 card for 7
card cost = 6, max allowed = 7
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 62: = 11 card for 8
card cost = 5, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 63: = 11 card for 9
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 64: = 11 card for 10
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 65: = 11 card for 11
card cost = 5, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 66: = 11 card for 12
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 67: = 11 card for 13
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 68: = 11 card for 14
card cost = 3, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 69: = 11 card for 15
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 70: = 11 card for 16
card cost = 3, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 71: = 11 card for 2
card cost = 5, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 72: = 11 card for 3
card cost = 8, max allowed = 7
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 73: = 11 card for 4
card cost = 0, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 74: = 11 card for 5
card cost = 3, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 75: = 11 card for 6
card cost = 6, max allowed = 7
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 76: = 12 card for 7
card cost = 6, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 77: = 12 card for 8
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 78: = 12 card for 9
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 79: = 12 card for 10
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 80: = 12 card for 11
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 81: = 12 card for 12
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 82: = 12 card for 13
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 83: = 12 card for 14
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 84: = 12 card for 15
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 85: = 12 card for 16
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 86: = 12 card for 2
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 87: = 12 card for 3
card cost = 8, max allowed = 6
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 88: = 12 card for 4
card cost = 0, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 89: = 12 card for 5
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 90: = 12 card for 6
card cost = 6, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 91: = 13 card for 7
card cost = 6, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 92: = 13 card for 8
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 93: = 13 card for 9
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 94: = 13 card for 10
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 95: = 13 card for 11
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 96: = 13 card for 12
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 97: = 13 card for 13
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 98: = 13 card for 14
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 99: = 13 card for 15
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 100: = 13 card for 16
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 101: = 13 card for 2
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 102: = 13 card for 3
card cost = 8, max allowed = 6
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 103: = 13 card for 4
card cost = 0, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 104: = 13 card for 5
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 105: = 13 card for 6
card cost = 6, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 106: = 14 card for 7
card cost = 6, max allowed = 5
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 107: = 14 card for 8
card cost = 5, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 108: = 14 card for 9
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 109: = 14 card for 10
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 110: = 14 card for 11
card cost = 5, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 111: = 14 card for 12
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 112: = 14 card for 13
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 113: = 14 card for 14
card cost = 3, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 114: = 14 card for 15
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 115: = 14 card for 16
card cost = 3, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 116: = 14 card for 2
card cost = 5, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 117: = 14 card for 3
card cost = 8, max allowed = 5
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 118: = 14 card for 4
card cost = 0, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 119: = 14 card for 5
card cost = 3, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 120: = 14 card for 6
card cost = 6, max allowed = 5
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 121: = 15 card for 7
card cost = 6, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 122: = 15 card for 8
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 123: = 15 card for 9
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 124: = 15 card for 10
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 125: = 15 card for 11
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 126: = 15 card for 12
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 127: = 15 card for 13
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 128: = 15 card for 14
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 129: = 15 card for 15
card cost = 4, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 130: = 15 card for 16
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 131: = 15 card for 2
card cost = 5, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 132: = 15 card for 3
card cost = 8, max allowed = 6
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 133: = 15 card for 4
card cost = 0, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 134: = 15 card for 5
card cost = 3, max allowed = 6
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 135: = 15 card for 6
card cost = 6, max allowed = 6
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 136: = 16 card for 7
card cost = 6, max allowed = 5
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 137: = 16 card for 8
card cost = 5, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 138: = 16 card for 9
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 139: = 16 card for 10
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 140: = 16 card for 11
card cost = 5, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 141: = 16 card for 12
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 142: = 16 card for 13
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 143: = 16 card for 14
card cost = 3, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 144: = 16 card for 15
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 145: = 16 card for 16
card cost = 3, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 146: = 16 card for 2
card cost = 5, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 147: = 16 card for 3
card cost = 8, max allowed = 5
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 148: = 16 card for 4
card cost = 0, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 149: = 16 card for 5
card cost = 3, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 150: = 16 card for 6
card cost = 6, max allowed = 5
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 151: = 2 card for 7
card cost = 6, max allowed = 7
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 152: = 2 card for 8
card cost = 5, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 153: = 2 card for 9
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 154: = 2 card for 10
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 155: = 2 card for 11
card cost = 5, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 156: = 2 card for 12
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 157: = 2 card for 13
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 158: = 2 card for 14
card cost = 3, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 159: = 2 card for 15
card cost = 4, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 160: = 2 card for 16
card cost = 3, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 161: = 2 card for 2
card cost = 5, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 162: = 2 card for 3
card cost = 8, max allowed = 7
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 163: = 2 card for 4
card cost = 0, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 164: = 2 card for 5
card cost = 3, max allowed = 7
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 165: = 2 card for 6
card cost = 6, max allowed = 7
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 166: = 3 card for 7
card cost = 6, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 167: = 3 card for 8
card cost = 5, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 168: = 3 card for 9
card cost = 4, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 169: = 3 card for 10
card cost = 4, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 170: = 3 card for 11
card cost = 5, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 171: = 3 card for 12
card cost = 4, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 172: = 3 card for 13
card cost = 4, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 173: = 3 card for 14
card cost = 3, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 174: = 3 card for 15
card cost = 4, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 175: = 3 card for 16
card cost = 3, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 176: = 3 card for 2
card cost = 5, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 177: = 3 card for 3
card cost = 8, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 178: = 3 card for 4
card cost = 0, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 179: = 3 card for 5
card cost = 3, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 180: = 3 card for 6
card cost = 6, max allowed = 10
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 181: = 4 card for 7
card cost = 6, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 182: = 4 card for 8
card cost = 5, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 183: = 4 card for 9
card cost = 4, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 184: = 4 card for 10
card cost = 4, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 185: = 4 card for 11
card cost = 5, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 186: = 4 card for 12
card cost = 4, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 187: = 4 card for 13
card cost = 4, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 188: = 4 card for 14
card cost = 3, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 189: = 4 card for 15
card cost = 4, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 190: = 4 card for 16
card cost = 3, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 191: = 4 card for 2
card cost = 5, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 192: = 4 card for 3
card cost = 8, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 193: = 4 card for 4
card cost = 0, max allowed = 2
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 194: = 4 card for 5
card cost = 3, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 195: = 4 card for 6
card cost = 6, max allowed = 2
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 196: = 5 card for 7
card cost = 6, max allowed = 5
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 197: = 5 card for 8
card cost = 5, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 198: = 5 card for 9
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 199: = 5 card for 10
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 200: = 5 card for 11
card cost = 5, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 201: = 5 card for 12
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 202: = 5 card for 13
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 203: = 5 card for 14
card cost = 3, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 204: = 5 card for 15
card cost = 4, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 205: = 5 card for 16
card cost = 3, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 206: = 5 card for 2
card cost = 5, max allowed = 5
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 207: = 5 card for 3
card cost = 8, max allowed = 5
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 208: = 5 card for 4
card cost = 0, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 209: = 5 card for 5
card cost = 3, max allowed = 5
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 210: = 5 card for 6
card cost = 6, max allowed = 5
hand count = 4, expected = 5
deck count = 5, expected = 5
discard count = 1, expected = 0
card supply = 9, expected = 10
card still in hand = 0, expected = 1
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 211: = 6 card for 7
card cost = 6, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 212: = 6 card for 8
card cost = 5, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 213: = 6 card for 9
card cost = 4, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 214: = 6 card for 10
card cost = 4, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 215: = 6 card for 11
card cost = 5, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 216: = 6 card for 12
card cost = 4, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 217: = 6 card for 13
card cost = 4, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 218: = 6 card for 14
card cost = 3, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 219: = 6 card for 15
card cost = 4, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 220: = 6 card for 16
card cost = 3, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 221: = 6 card for 2
card cost = 5, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 222: = 6 card for 3
card cost = 8, max allowed = 8
hand count = 4, expected = 4
deck count = 5, expected = 5
discard count = 1, expected = 1
card supply = 9, expected = 9
card still in hand = 0, expected = 0
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED
TEST SUCCESSFULLY COMPLETED

TEST 223: = 6 card for 4
card cost = 0, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 224: = 6 card for 5
card cost = 3, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED

TEST 225: = 6 card for 6
card cost = 6, max allowed = 8
hand count = 5, expected = 4
deck count = 5, expected = 5
discard count = 0, expected = 1
card supply = 10, expected = 9
card still in hand = 1, expected = 0
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED
TEST FAILED
TEST FAILED


 >>>>> FAILURE: Testing complete remodel <<<<<

File 'dominion.c'
Lines executed:34.20% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   546168:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
   546168:   11:  if (*(int*)a < *(int*)b)
   195060:   12:    return -1;
   351108:   13:  return 0;
   546168:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     9754:   44:  SelectStream(1);
     9754:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    19508:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     9754:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   214588:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  2145880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1853260:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   975400:   65:        }
    97540:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     9754:   73:  if (numPlayers == 2)
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        2:   76:    }
     9752:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
     9752:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     9754:   87:  if (numPlayers == 2)
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        2:   92:    }
        -:   93:  else
        -:   94:    {
     9752:   95:      state->supplyCount[estate] = 12;
     9752:   96:      state->supplyCount[duchy] = 12;
     9752:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     9754:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     9754:  102:  state->supplyCount[silver] = 40;
     9754:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   409668:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  3218820:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1511870:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   185328:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    19504:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    19504:  118:		  else{ state->supplyCount[i] = 12; }
    19504:  119:		}
        -:  120:	      else
        -:  121:		{
    78036:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    97540:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1414330:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  1414330:  130:	}
        -:  131:
   195080:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    97532:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    39012:  140:      state->deckCount[i] = 0;
   312096:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
   117036:  143:	  state->deck[i][j] = estate;
   117036:  144:	  state->deckCount[i]++;
   117036:  145:	}
   624192:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   273084:  148:	  state->deck[i][j] = copper;
   273084:  149:	  state->deckCount[i]++;		
   273084:  150:	}
    39012:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    97532:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    39012:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    39012:  160:    }
        -:  161:
        -:  162:  //draw player hands
    97532:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    39012:  166:      state->handCount[i] = 0;
    39012:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    39012:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   546224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   263358:  178:      state->embargoTokens[i] = 0;
   263358:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     9754:  182:  state->outpostPlayed = 0;
     9754:  183:  state->phase = 0;
     9754:  184:  state->numActions = 1;
     9754:  185:  state->numBuys = 1;
     9754:  186:  state->playedCardCount = 0;
     9754:  187:  state->whoseTurn = 0;
     9754:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   117048:  192:  for (it = 0; it < 5; it++){
    48770:  193:    drawCard(state->whoseTurn, state);
    48770:  194:  }
        -:  195:
     9754:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     9754:  198:  return 0;
     9754:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    39012:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    39012:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    39012:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   858264:  214:  while (state->deckCount[player] > 0) {
   390120:  215:    card = floor(Random() * state->deckCount[player]);
   390120:  216:    newDeck[newDeckPos] = state->deck[player][card];
   390120:  217:    newDeckPos++;
  2711336:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   965548:  219:      state->deck[player][i] = state->deck[player][i+1];
   965548:  220:    }
   390120:  221:    state->deckCount[player]--;
        -:  222:  }
   858264:  223:  for (i = 0; i < newDeckPos; i++) {
   390120:  224:    state->deck[player][i] = newDeck[i];
   390120:  225:    state->deckCount[player]++;
   390120:  226:  }
        -:  227:
    39012:  228:  return 0;
    39012:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      272:  280:  who = state->whoseTurn;
        -:  281:
      272:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
      136:  285:    return -1;
      136:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       68:  289:    return -1;
       68:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       68:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       68:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       68:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       68:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       68:  308:  return 0;
      272:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      717:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     8000:  326:  int count = 0;
        -:  327:
   336000:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
   240000:  330:      if (state->deck[player][i] == card) count++;
   160000:  331:    }
        -:  332:
   336000:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
   240000:  335:      if (state->hand[player][i] == card) count++;
   160000:  336:    }
        -:  337:
   336000:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
   240000:  340:      if (state->discard[player][i] == card) count++;
   160000:  341:    }
        -:  342:
     8000:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
      285:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    48770:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
    48770:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    48770:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    48770:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    48770:  576:    state->deckCount[player]--;
    48770:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    48770:  580:  return 0;
    48770:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
     2292:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       36:  590:      return 2;
        -:  591:    case duchy:
      137:  592:      return 5;
        -:  593:    case province:
      137:  594:      return 8;
        -:  595:    case copper:
      182:  596:      return 0;
        -:  597:    case silver:
      182:  598:      return 3;
        -:  599:    case gold:
      182:  600:      return 6;
        -:  601:    case adventurer:
      173:  602:      return 6;
        -:  603:    case council_room:
      137:  604:      return 5;
        -:  605:    case feast:
      167:  606:      return 4;
        -:  607:    case gardens:
      137:  608:      return 4;
        -:  609:    case mine:
      137:  610:      return 5;
        -:  611:    case remodel:
      137:  612:      return 4;
        -:  613:    case smithy:
      137:  614:      return 4;
        -:  615:    case village:
      137:  616:      return 3;
        -:  617:    case baron:
      137:  618:      return 4;
        -:  619:    case great_hall:
      137:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
     2292:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      285:  653:  int currentPlayer = whoseTurn(state);
      285:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      285:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      285:  658:  int drawntreasure=0;
      285:  659:  int z = 0;// this is the counter for the temp hand
      285:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
      285:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
    #####:  669:            return adventurerEffect(&drawntreasure, state, &currentPlayer, &z, temphand);
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
    #####:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
    #####:  687:	    }
    #####:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
    #####:  708:	if (supplyCount(choice1, state) <= 0){
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
    #####:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
    #####:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
    #####:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
       60:  752:            return mineEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  753:			
        -:  754:    case remodel:
      225:  755:            return remodelEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  756:		
        -:  757:    case smithy:
    #####:  758:            return smithyEffect(state, &currentPlayer, handPos);
        -:  759:		
        -:  760:    case village:
        -:  761:        //+1 Card
    #####:  762:        drawCard(currentPlayer, state);
        -:  763:     
        -:  764:        //+2 Actions
    #####:  765:        state->numActions = state->numActions + 2;
        -:  766:     
        -:  767:        //discard played card from hand
    #####:  768:        discardCard(handPos, currentPlayer, state, 0);
    #####:  769:        return 0;
        -:  770:            
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    #####:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
    #####:  797:		isGameOver(state);
    #####:  798:	      }
    #####:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    #####:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
    #####:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
    #####:  814:	    isGameOver(state);
    #####:  815:	  }
    #####:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    #####:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    #####:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    #####:  876:			}
    #####:  877:		    }
    #####:  878:		}
    #####:  879:	    }
        -:  880:				
    #####:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
    #####:  885:            return stewardEffect(state, &currentPlayer, choice1, choice2, choice3, handPos);
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
    #####:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
    #####:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
    #####:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
    #####:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
    #####:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  932:	  state->coins += 2;
    #####:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
    #####:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  962:	    {
    #####:  963:	      j++;
    #####:  964:	    }
    #####:  965:	}
    #####:  966:      if (j < choice2)
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  983:	    }
    #####:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
    #####:  997:		  break;
        -:  998:		}
    #####:  999:	    }
    #####: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
    #####: 1027:		}
        -: 1028:					
    #####: 1029:	    }
        -: 1030:				
    #####: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
    #####: 1082:	if (i != currentPlayer){
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1086:	}
    #####: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (index > -1)
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
      285: 1122:}
        -: 1123:
        -: 1124:int adventurerEffect(int *drawntreasure, struct gameState *state, int *currentPlayer, int *z, int *temphand){
    #####: 1125:    while((*drawntreasure)<2){
    #####: 1126:        if (state->deckCount[*currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1127:            shuffle(*currentPlayer, state);
    #####: 1128:        }
    #####: 1129:        drawCard(*currentPlayer, state);
    #####: 1130:        int cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1131:        if (cardDrawn == copper || cardDrawn == silver)
    #####: 1132:            (*drawntreasure)++;
        -: 1133:        else{
    #####: 1134:            temphand[(*z)]=cardDrawn;
    #####: 1135:            state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1136:            (*z)++;
        -: 1137:        }
        -: 1138:    }
    #####: 1139:    while((*z)-1>=0){
    #####: 1140:        state->discard[*currentPlayer][state->discardCount[*currentPlayer]++]=temphand[(*z)-1]; // discard all cards in play that have been drawn
    #####: 1141:        (*z)=(*z)-1;
        -: 1142:    }
    #####: 1143:    return 0;
        -: 1144:}
        -: 1145:
        -: 1146:int mineEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
       60: 1147:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1148:    
      120: 1149:    if (state->hand[*currentPlayer][choice1] < copper || state->hand[*currentPlayer][choice1] > gold)
        -: 1150:    {
       15: 1151:        return -1;
        -: 1152:    }
        -: 1153:    
       45: 1154:    if (choice2 > treasure_map)
        -: 1155:    {
    #####: 1156:        return -1;
        -: 1157:    }
        -: 1158:
       45: 1159:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1160:    {
       28: 1161:        return -1;
        -: 1162:    }
        -: 1163:    
       17: 1164:    gainCard(choice2, state, 2, *currentPlayer);
        -: 1165:    
        -: 1166:    //discard card from hand
       17: 1167:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1168:    
        -: 1169:    //discard trashed card
      204: 1170:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1171:    {
       85: 1172:        if (state->hand[*currentPlayer][i] == j)
        -: 1173:        {
    #####: 1174:            discardCard(i, *currentPlayer, state, 0);
    #####: 1175:            break;
        -: 1176:        }
       85: 1177:    }
        -: 1178:    
       17: 1179:    return 0;
       60: 1180:}
        -: 1181:
        -: 1182:int remodelEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
      225: 1183:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1184:    
      225: 1185:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 1) > getCost(choice2) )
        -: 1186:    {
      137: 1187:        return -1;
        -: 1188:    }
        -: 1189:    
       88: 1190:    gainCard(choice2, state, 0, *currentPlayer);
        -: 1191:    
        -: 1192:    //discard card from hand
       88: 1193:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1194:    
        -: 1195:    //discard trashed card
      880: 1196:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1197:    {
      352: 1198:        if (state->hand[*currentPlayer][i] == j)
        -: 1199:        {
    #####: 1200:            discardCard(i, *currentPlayer, state, 1);
    #####: 1201:            break;
        -: 1202:        }
      352: 1203:    }
        -: 1204:    
        -: 1205:    
       88: 1206:    return 0;
      225: 1207:}
        -: 1208:
        -: 1209:int smithyEffect(struct gameState *state, int *currentPlayer, int handPos){
        -: 1210:    //+3 Cards
    #####: 1211:    for (int i = 0; i <= 3; i++)
        -: 1212:    {
    #####: 1213:        drawCard(*currentPlayer, state);
    #####: 1214:    }
        -: 1215:    
        -: 1216:    //discard card from hand
    #####: 1217:    discardCard(handPos, *currentPlayer, state,2);
    #####: 1218:    return 0;
        -: 1219:}
        -: 1220:
        -: 1221:int stewardEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int choice3, int handPos){
    #####: 1222:    if (choice1 == 1)
        -: 1223:    {
        -: 1224:        //+2 cards
    #####: 1225:        drawCard(*currentPlayer, state);
    #####: 1226:        drawCard(*currentPlayer, state);
    #####: 1227:    }
    #####: 1228:    else if (choice1 == 2)
        -: 1229:    {
        -: 1230:        //+2 coins
    #####: 1231:        state->coins = state->coins + 2;
    #####: 1232:    }
        -: 1233:    else
        -: 1234:    {
        -: 1235:        //trash 2 cards in hand
    #####: 1236:        discardCard(choice2, *currentPlayer, state, 1);
    #####: 1237:        discardCard(choice3, *currentPlayer, state, 1);
        -: 1238:    }
        -: 1239:    
        -: 1240:    //discard card from hand
    #####: 1241:    discardCard(handPos, *currentPlayer, state, 0);
    #####: 1242:    return 0;
        -: 1243:}
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
      105: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to played pile
      105: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      105: 1255:      state->playedCardCount++;
      105: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
      105: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
      105: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
    #####: 1266:    }
      105: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
    #####: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
      105: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
      105: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
      105: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
      105: 1282:  return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
      581: 1290:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1291:    {
      204: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
      377: 1300:  if (toFlag == 1)
        -: 1301:    {
       68: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       68: 1303:      state->deckCount[player]++;
       68: 1304:    }
      309: 1305:  else if (toFlag == 2)
        -: 1306:    {
       85: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       85: 1308:      state->handCount[player]++;
       85: 1309:    }
        -: 1310:  else
        -: 1311:    {
      224: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      224: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
      377: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
      377: 1319:  return 0;
      581: 1320:}
        -: 1321:
        -: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
    11098: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
   133176: 1330:  for (i = 0; i < state->handCount[player]; i++)
        -: 1331:    {
    55490: 1332:      if (state->hand[player][i] == copper)
        -: 1333:	{
    40696: 1334:	  state->coins += 1;
    40696: 1335:	}
    14794: 1336:      else if (state->hand[player][i] == silver)
        -: 1337:	{
     1680: 1338:	  state->coins += 2;
     1680: 1339:	}
    13114: 1340:      else if (state->hand[player][i] == gold)
        -: 1341:	{
     1680: 1342:	  state->coins += 3;
     1680: 1343:	}	
    55490: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
    11098: 1347:  state->coins += bonus;
        -: 1348:
    11098: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:int customAssert(bool test){
    12461: 1353:    if (test == false){
      786: 1354:        printf("TEST FAILED\n");
      786: 1355:        return 1;
        -: 1356:    }
        -: 1357:    else{
    11675: 1358:        printf("TEST SUCCESSFULLY COMPLETED\n");
    11675: 1359:        return 0;
        -: 1360:    }
    12461: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
----------------- Testing Card: adventurer ----------------

TEST 0: = 2 4 cards at top of deck
hand count = 7, expected = 6
deck count = 8, expected = 8
discard count = 10, expected = 11
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

TEST 1: = 2 coin cards at bottom of deck
hand count = 7, expected = 6
deck count = 0, expected = 0
discard count = 18, expected = 19
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

TEST 2: = 2 coin cards at top of discard
hand count = 7, expected = 6
deck count = 0, expected = 0
discard count = 18, expected = 11
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

TEST 3: = 2 coin cards at bottom of discard
hand count = 7, expected = 6
deck count = 8, expected = 0
discard count = 10, expected = 19
TEST FAILED
TEST FAILED
TEST FAILED

TEST 4: = No coin cards at deck or discard
hand count = -1, expected = 4
deck count = 0, expected = 0
discard count = 26, expected = 21
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

TEST 6: = 2 5 cards at top of deck
hand count = 7, expected = 6
deck count = 8, expected = 8
discard count = 10, expected = 11
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

TEST 7: = 2 coin cards at bottom of deck
hand count = 7, expected = 6
deck count = 0, expected = 0
discard count = 18, expected = 19
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

TEST 8: = 2 coin cards at top of discard
hand count = 7, expected = 6
deck count = 3, expected = 0
discard count = 15, expected = 11
TEST FAILED
TEST FAILED
TEST FAILED

TEST 9: = 2 coin cards at bottom of discard
hand count = 7, expected = 6
deck count = 8, expected = 0
discard count = 10, expected = 19
TEST FAILED
TEST FAILED
TEST FAILED

TEST 10: = No coin cards at deck or discard
hand count = -1, expected = 4
deck count = 0, expected = 0
discard count = 26, expected = 21
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

TEST 12: = 2 6 cards at top of deck
hand count = -1, expected = 6
deck count = 0, expected = 8
discard count = 26, expected = 11
TEST FAILED
TEST FAILED
TEST FAILED

TEST 13: = 2 coin cards at bottom of deck
hand count = -1, expected = 6
deck count = 0, expected = 0
discard count = 26, expected = 19
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

TEST 14: = 2 coin cards at top of discard
hand count = -1, expected = 6
deck count = 0, expected = 0
discard count = 26, expected = 11
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

TEST 15: = 2 coin cards at bottom of discard
hand count = -1, expected = 6
deck count = 0, expected = 0
discard count = 26, expected = 19
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

TEST 16: = No coin cards at deck or discard
hand count = -1, expected = 4
deck count = 0, expected = 0
discard count = 26, expected = 21
TEST FAILED
TEST SUCCESSFULLY COMPLETED
TEST FAILED

 >>>>> FAILURE: Testing complete adventurer <<<<<

File 'dominion.c'
Lines executed:39.11% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   546328:    9:  if (*(int*)a > *(int*)b)
        3:   10:    return 1;
   546325:   11:  if (*(int*)a < *(int*)b)
   195076:   12:    return -1;
   351249:   13:  return 0;
   546328:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     9755:   44:  SelectStream(1);
     9755:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    19510:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     9755:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   214610:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  2146100:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1853450:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   975500:   65:        }
    97550:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     9755:   73:  if (numPlayers == 2)
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        3:   76:    }
     9752:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
     9752:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     9755:   87:  if (numPlayers == 2)
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        3:   92:    }
        -:   93:  else
        -:   94:    {
     9752:   95:      state->supplyCount[estate] = 12;
     9752:   96:      state->supplyCount[duchy] = 12;
     9752:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     9755:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     9755:  102:  state->supplyCount[silver] = 40;
     9755:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   409710:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  3219150:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1512025:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   185348:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    19504:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    19504:  118:		  else{ state->supplyCount[i] = 12; }
    19504:  119:		}
        -:  120:	      else
        -:  121:		{
    78046:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    97550:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1414475:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  1414475:  130:	}
        -:  131:
   195100:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    97538:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    39014:  140:      state->deckCount[i] = 0;
   312112:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
   117042:  143:	  state->deck[i][j] = estate;
   117042:  144:	  state->deckCount[i]++;
   117042:  145:	}
   624224:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   273098:  148:	  state->deck[i][j] = copper;
   273098:  149:	  state->deckCount[i]++;		
   273098:  150:	}
    39014:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    97538:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    39014:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    39014:  160:    }
        -:  161:
        -:  162:  //draw player hands
    97538:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    39014:  166:      state->handCount[i] = 0;
    39014:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    39014:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   546280:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   263385:  178:      state->embargoTokens[i] = 0;
   263385:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     9755:  182:  state->outpostPlayed = 0;
     9755:  183:  state->phase = 0;
     9755:  184:  state->numActions = 1;
     9755:  185:  state->numBuys = 1;
     9755:  186:  state->playedCardCount = 0;
     9755:  187:  state->whoseTurn = 0;
     9755:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   117060:  192:  for (it = 0; it < 5; it++){
    48775:  193:    drawCard(state->whoseTurn, state);
    48775:  194:  }
        -:  195:
     9755:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     9755:  198:  return 0;
     9755:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    39081:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    39081:  209:  if (state->deckCount[player] < 1)
       56:  210:    return -1;
    39025:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   858550:  214:  while (state->deckCount[player] > 0) {
   390250:  215:    card = floor(Random() * state->deckCount[player]);
   390250:  216:    newDeck[newDeckPos] = state->deck[player][card];
   390250:  217:    newDeckPos++;
  2712186:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   965843:  219:      state->deck[player][i] = state->deck[player][i+1];
   965843:  220:    }
   390250:  221:    state->deckCount[player]--;
        -:  222:  }
   858550:  223:  for (i = 0; i < newDeckPos; i++) {
   390250:  224:    state->deck[player][i] = newDeck[i];
   390250:  225:    state->deckCount[player]++;
   390250:  226:  }
        -:  227:
    39025:  228:  return 0;
    39081:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      272:  280:  who = state->whoseTurn;
        -:  281:
      272:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
      136:  285:    return -1;
      136:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       68:  289:    return -1;
       68:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       68:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       68:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       68:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       68:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       68:  308:  return 0;
      272:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      717:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     8000:  326:  int count = 0;
        -:  327:
   336000:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
   240000:  330:      if (state->deck[player][i] == card) count++;
   160000:  331:    }
        -:  332:
   336000:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
   240000:  335:      if (state->hand[player][i] == card) count++;
   160000:  336:    }
        -:  337:
   336000:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
   240000:  340:      if (state->discard[player][i] == card) count++;
   160000:  341:    }
        -:  342:
     8000:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
      300:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    49056:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      354:  533:    for (i = 0; i < state->discardCount[player];i++){
      110:  534:      state->deck[player][i] = state->discard[player][i];
      110:  535:      state->discard[player][i] = -1;
      110:  536:    }
        -:  537:
       67:  538:    state->deckCount[player] = state->discardCount[player];
       67:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       67:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       67:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       67:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       67:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       67:  559:    if (deckCounter == 0)
       56:  560:      return -1;
        -:  561:
       11:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       11:  563:    state->deckCount[player]--;
       11:  564:    state->handCount[player]++;//Increment hand count
       11:  565:  }
        -:  566:
        -:  567:  else{
    48989:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    48989:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    48989:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    48989:  576:    state->deckCount[player]--;
    48989:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    49000:  580:  return 0;
    49056:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
     2292:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       36:  590:      return 2;
        -:  591:    case duchy:
      137:  592:      return 5;
        -:  593:    case province:
      137:  594:      return 8;
        -:  595:    case copper:
      182:  596:      return 0;
        -:  597:    case silver:
      182:  598:      return 3;
        -:  599:    case gold:
      182:  600:      return 6;
        -:  601:    case adventurer:
      173:  602:      return 6;
        -:  603:    case council_room:
      137:  604:      return 5;
        -:  605:    case feast:
      167:  606:      return 4;
        -:  607:    case gardens:
      137:  608:      return 4;
        -:  609:    case mine:
      137:  610:      return 5;
        -:  611:    case remodel:
      137:  612:      return 4;
        -:  613:    case smithy:
      137:  614:      return 4;
        -:  615:    case village:
      137:  616:      return 3;
        -:  617:    case baron:
      137:  618:      return 4;
        -:  619:    case great_hall:
      137:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
     2292:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      300:  653:  int currentPlayer = whoseTurn(state);
      300:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      300:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      300:  658:  int drawntreasure=0;
      300:  659:  int z = 0;// this is the counter for the temp hand
      300:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
      300:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
       15:  669:            return adventurerEffect(&drawntreasure, state, &currentPlayer, &z, temphand);
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
    #####:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
    #####:  687:	    }
    #####:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
    #####:  708:	if (supplyCount(choice1, state) <= 0){
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
    #####:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
    #####:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
    #####:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
       60:  752:            return mineEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  753:			
        -:  754:    case remodel:
      225:  755:            return remodelEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  756:		
        -:  757:    case smithy:
    #####:  758:            return smithyEffect(state, &currentPlayer, handPos);
        -:  759:		
        -:  760:    case village:
        -:  761:        //+1 Card
    #####:  762:        drawCard(currentPlayer, state);
        -:  763:     
        -:  764:        //+2 Actions
    #####:  765:        state->numActions = state->numActions + 2;
        -:  766:     
        -:  767:        //discard played card from hand
    #####:  768:        discardCard(handPos, currentPlayer, state, 0);
    #####:  769:        return 0;
        -:  770:            
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    #####:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
    #####:  797:		isGameOver(state);
    #####:  798:	      }
    #####:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    #####:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
    #####:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
    #####:  814:	    isGameOver(state);
    #####:  815:	  }
    #####:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    #####:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    #####:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    #####:  876:			}
    #####:  877:		    }
    #####:  878:		}
    #####:  879:	    }
        -:  880:				
    #####:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
    #####:  885:            return stewardEffect(state, &currentPlayer, choice1, choice2, choice3, handPos);
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
    #####:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
    #####:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
    #####:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
    #####:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
    #####:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  932:	  state->coins += 2;
    #####:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
    #####:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  962:	    {
    #####:  963:	      j++;
    #####:  964:	    }
    #####:  965:	}
    #####:  966:      if (j < choice2)
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  983:	    }
    #####:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
    #####:  997:		  break;
        -:  998:		}
    #####:  999:	    }
    #####: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
    #####: 1027:		}
        -: 1028:					
    #####: 1029:	    }
        -: 1030:				
    #####: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
    #####: 1082:	if (i != currentPlayer){
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1086:	}
    #####: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (index > -1)
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
      300: 1122:}
        -: 1123:
        -: 1124:int adventurerEffect(int *drawntreasure, struct gameState *state, int *currentPlayer, int *z, int *temphand){
      592: 1125:    while((*drawntreasure)<2){
      281: 1126:        if (state->deckCount[*currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1127:            shuffle(*currentPlayer, state);
    #####: 1128:        }
      281: 1129:        drawCard(*currentPlayer, state);
      281: 1130:        int cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
      540: 1131:        if (cardDrawn == copper || cardDrawn == silver)
       30: 1132:            (*drawntreasure)++;
        -: 1133:        else{
      251: 1134:            temphand[(*z)]=cardDrawn;
      251: 1135:            state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      251: 1136:            (*z)++;
        -: 1137:        }
        -: 1138:    }
      532: 1139:    while((*z)-1>=0){
      251: 1140:        state->discard[*currentPlayer][state->discardCount[*currentPlayer]++]=temphand[(*z)-1]; // discard all cards in play that have been drawn
      251: 1141:        (*z)=(*z)-1;
        -: 1142:    }
       15: 1143:    return 0;
        -: 1144:}
        -: 1145:
        -: 1146:int mineEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
       60: 1147:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1148:    
      120: 1149:    if (state->hand[*currentPlayer][choice1] < copper || state->hand[*currentPlayer][choice1] > gold)
        -: 1150:    {
       15: 1151:        return -1;
        -: 1152:    }
        -: 1153:    
       45: 1154:    if (choice2 > treasure_map)
        -: 1155:    {
    #####: 1156:        return -1;
        -: 1157:    }
        -: 1158:
       45: 1159:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1160:    {
       28: 1161:        return -1;
        -: 1162:    }
        -: 1163:    
       17: 1164:    gainCard(choice2, state, 2, *currentPlayer);
        -: 1165:    
        -: 1166:    //discard card from hand
       17: 1167:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1168:    
        -: 1169:    //discard trashed card
      204: 1170:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1171:    {
       85: 1172:        if (state->hand[*currentPlayer][i] == j)
        -: 1173:        {
    #####: 1174:            discardCard(i, *currentPlayer, state, 0);
    #####: 1175:            break;
        -: 1176:        }
       85: 1177:    }
        -: 1178:    
       17: 1179:    return 0;
       60: 1180:}
        -: 1181:
        -: 1182:int remodelEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
      225: 1183:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1184:    
      225: 1185:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 1) > getCost(choice2) )
        -: 1186:    {
      137: 1187:        return -1;
        -: 1188:    }
        -: 1189:    
       88: 1190:    gainCard(choice2, state, 0, *currentPlayer);
        -: 1191:    
        -: 1192:    //discard card from hand
       88: 1193:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1194:    
        -: 1195:    //discard trashed card
      880: 1196:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1197:    {
      352: 1198:        if (state->hand[*currentPlayer][i] == j)
        -: 1199:        {
    #####: 1200:            discardCard(i, *currentPlayer, state, 1);
    #####: 1201:            break;
        -: 1202:        }
      352: 1203:    }
        -: 1204:    
        -: 1205:    
       88: 1206:    return 0;
      225: 1207:}
        -: 1208:
        -: 1209:int smithyEffect(struct gameState *state, int *currentPlayer, int handPos){
        -: 1210:    //+3 Cards
    #####: 1211:    for (int i = 0; i <= 3; i++)
        -: 1212:    {
    #####: 1213:        drawCard(*currentPlayer, state);
    #####: 1214:    }
        -: 1215:    
        -: 1216:    //discard card from hand
    #####: 1217:    discardCard(handPos, *currentPlayer, state,2);
    #####: 1218:    return 0;
        -: 1219:}
        -: 1220:
        -: 1221:int stewardEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int choice3, int handPos){
    #####: 1222:    if (choice1 == 1)
        -: 1223:    {
        -: 1224:        //+2 cards
    #####: 1225:        drawCard(*currentPlayer, state);
    #####: 1226:        drawCard(*currentPlayer, state);
    #####: 1227:    }
    #####: 1228:    else if (choice1 == 2)
        -: 1229:    {
        -: 1230:        //+2 coins
    #####: 1231:        state->coins = state->coins + 2;
    #####: 1232:    }
        -: 1233:    else
        -: 1234:    {
        -: 1235:        //trash 2 cards in hand
    #####: 1236:        discardCard(choice2, *currentPlayer, state, 1);
    #####: 1237:        discardCard(choice3, *currentPlayer, state, 1);
        -: 1238:    }
        -: 1239:    
        -: 1240:    //discard card from hand
    #####: 1241:    discardCard(handPos, *currentPlayer, state, 0);
    #####: 1242:    return 0;
        -: 1243:}
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
      105: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to played pile
      105: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      105: 1255:      state->playedCardCount++;
      105: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
      105: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
      105: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
    #####: 1266:    }
      105: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
    #####: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
      105: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
      105: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
      105: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
      105: 1282:  return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
      581: 1290:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1291:    {
      204: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
      377: 1300:  if (toFlag == 1)
        -: 1301:    {
       68: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       68: 1303:      state->deckCount[player]++;
       68: 1304:    }
      309: 1305:  else if (toFlag == 2)
        -: 1306:    {
       85: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       85: 1308:      state->handCount[player]++;
       85: 1309:    }
        -: 1310:  else
        -: 1311:    {
      224: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      224: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
      377: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
      377: 1319:  return 0;
      581: 1320:}
        -: 1321:
        -: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
    11099: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
   133188: 1330:  for (i = 0; i < state->handCount[player]; i++)
        -: 1331:    {
    55495: 1332:      if (state->hand[player][i] == copper)
        -: 1333:	{
    40700: 1334:	  state->coins += 1;
    40700: 1335:	}
    14795: 1336:      else if (state->hand[player][i] == silver)
        -: 1337:	{
     1680: 1338:	  state->coins += 2;
     1680: 1339:	}
    13115: 1340:      else if (state->hand[player][i] == gold)
        -: 1341:	{
     1680: 1342:	  state->coins += 3;
     1680: 1343:	}	
    55495: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
    11099: 1347:  state->coins += bonus;
        -: 1348:
    11099: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:int customAssert(bool test){
    12506: 1353:    if (test == false){
      820: 1354:        printf("TEST FAILED\n");
      820: 1355:        return 1;
        -: 1356:    }
        -: 1357:    else{
    11686: 1358:        printf("TEST SUCCESSFULLY COMPLETED\n");
    11686: 1359:        return 0;
        -: 1360:    }
    12506: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
----------------- Testing Card: smithy ----------------
TEST 1: = +3 cards
hand count = 8, expected = 7
deck count = 6, expected = 7
discard count = 10, expected = 11
coins = 4, expected = 4
TEST FAILED
TEST FAILED
TEST FAILED

TEST 2: = +3 cards and no deck and 10 cards in discard
hand count = 8, expected = 7
deck count = 6, expected = 7
discard count = 0, expected = 1
TEST FAILED
TEST FAILED
TEST FAILED

 >>>>> FAILURE: Testing complete smithy <<<<<

File 'dominion.c'
Lines executed:40.03% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   546368:    9:  if (*(int*)a > *(int*)b)
        3:   10:    return 1;
   546365:   11:  if (*(int*)a < *(int*)b)
   195086:   12:    return -1;
   351279:   13:  return 0;
   546368:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     9756:   44:  SelectStream(1);
     9756:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    19512:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     9756:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   214632:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  2146320:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1853640:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   975600:   65:        }
    97560:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     9756:   73:  if (numPlayers == 2)
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        4:   76:    }
     9752:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
     9752:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     9756:   87:  if (numPlayers == 2)
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        4:   92:    }
        -:   93:  else
        -:   94:    {
     9752:   95:      state->supplyCount[estate] = 12;
     9752:   96:      state->supplyCount[duchy] = 12;
     9752:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     9756:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     9756:  102:  state->supplyCount[silver] = 40;
     9756:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   409752:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  3219480:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1512180:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   185368:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    19504:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    19504:  118:		  else{ state->supplyCount[i] = 12; }
    19504:  119:		}
        -:  120:	      else
        -:  121:		{
    78056:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    97560:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1414620:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  1414620:  130:	}
        -:  131:
   195120:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    97544:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    39016:  140:      state->deckCount[i] = 0;
   312128:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
   117048:  143:	  state->deck[i][j] = estate;
   117048:  144:	  state->deckCount[i]++;
   117048:  145:	}
   624256:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   273112:  148:	  state->deck[i][j] = copper;
   273112:  149:	  state->deckCount[i]++;		
   273112:  150:	}
    39016:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    97544:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    39016:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    39016:  160:    }
        -:  161:
        -:  162:  //draw player hands
    97544:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    39016:  166:      state->handCount[i] = 0;
    39016:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    39016:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   546336:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   263412:  178:      state->embargoTokens[i] = 0;
   263412:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     9756:  182:  state->outpostPlayed = 0;
     9756:  183:  state->phase = 0;
     9756:  184:  state->numActions = 1;
     9756:  185:  state->numBuys = 1;
     9756:  186:  state->playedCardCount = 0;
     9756:  187:  state->whoseTurn = 0;
     9756:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   117072:  192:  for (it = 0; it < 5; it++){
    48780:  193:    drawCard(state->whoseTurn, state);
    48780:  194:  }
        -:  195:
     9756:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     9756:  198:  return 0;
     9756:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    39084:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    39084:  209:  if (state->deckCount[player] < 1)
       56:  210:    return -1;
    39028:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   858616:  214:  while (state->deckCount[player] > 0) {
   390280:  215:    card = floor(Random() * state->deckCount[player]);
   390280:  216:    newDeck[newDeckPos] = state->deck[player][card];
   390280:  217:    newDeckPos++;
  2712396:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   965918:  219:      state->deck[player][i] = state->deck[player][i+1];
   965918:  220:    }
   390280:  221:    state->deckCount[player]--;
        -:  222:  }
   858616:  223:  for (i = 0; i < newDeckPos; i++) {
   390280:  224:    state->deck[player][i] = newDeck[i];
   390280:  225:    state->deckCount[player]++;
   390280:  226:  }
        -:  227:
    39028:  228:  return 0;
    39084:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      272:  280:  who = state->whoseTurn;
        -:  281:
      272:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
      136:  285:    return -1;
      136:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       68:  289:    return -1;
       68:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       68:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       68:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       68:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       68:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       68:  308:  return 0;
      272:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      717:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     8000:  326:  int count = 0;
        -:  327:
   336000:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
   240000:  330:      if (state->deck[player][i] == card) count++;
   160000:  331:    }
        -:  332:
   336000:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
   240000:  335:      if (state->hand[player][i] == card) count++;
   160000:  336:    }
        -:  337:
   336000:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
   240000:  340:      if (state->discard[player][i] == card) count++;
   160000:  341:    }
        -:  342:
     8000:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
      302:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    49069:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      376:  533:    for (i = 0; i < state->discardCount[player];i++){
      120:  534:      state->deck[player][i] = state->discard[player][i];
      120:  535:      state->discard[player][i] = -1;
      120:  536:    }
        -:  537:
       68:  538:    state->deckCount[player] = state->discardCount[player];
       68:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       68:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       68:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       68:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       68:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       68:  559:    if (deckCounter == 0)
       56:  560:      return -1;
        -:  561:
       12:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       12:  563:    state->deckCount[player]--;
       12:  564:    state->handCount[player]++;//Increment hand count
       12:  565:  }
        -:  566:
        -:  567:  else{
    49001:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    49001:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    49001:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    49001:  576:    state->deckCount[player]--;
    49001:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    49013:  580:  return 0;
    49069:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
     2292:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       36:  590:      return 2;
        -:  591:    case duchy:
      137:  592:      return 5;
        -:  593:    case province:
      137:  594:      return 8;
        -:  595:    case copper:
      182:  596:      return 0;
        -:  597:    case silver:
      182:  598:      return 3;
        -:  599:    case gold:
      182:  600:      return 6;
        -:  601:    case adventurer:
      173:  602:      return 6;
        -:  603:    case council_room:
      137:  604:      return 5;
        -:  605:    case feast:
      167:  606:      return 4;
        -:  607:    case gardens:
      137:  608:      return 4;
        -:  609:    case mine:
      137:  610:      return 5;
        -:  611:    case remodel:
      137:  612:      return 4;
        -:  613:    case smithy:
      137:  614:      return 4;
        -:  615:    case village:
      137:  616:      return 3;
        -:  617:    case baron:
      137:  618:      return 4;
        -:  619:    case great_hall:
      137:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
     2292:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      302:  653:  int currentPlayer = whoseTurn(state);
      302:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      302:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      302:  658:  int drawntreasure=0;
      302:  659:  int z = 0;// this is the counter for the temp hand
      302:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
      302:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
       15:  669:            return adventurerEffect(&drawntreasure, state, &currentPlayer, &z, temphand);
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
    #####:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
    #####:  687:	    }
    #####:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
    #####:  708:	if (supplyCount(choice1, state) <= 0){
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
    #####:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
    #####:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
    #####:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
       60:  752:            return mineEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  753:			
        -:  754:    case remodel:
      225:  755:            return remodelEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  756:		
        -:  757:    case smithy:
        2:  758:            return smithyEffect(state, &currentPlayer, handPos);
        -:  759:		
        -:  760:    case village:
        -:  761:        //+1 Card
    #####:  762:        drawCard(currentPlayer, state);
        -:  763:     
        -:  764:        //+2 Actions
    #####:  765:        state->numActions = state->numActions + 2;
        -:  766:     
        -:  767:        //discard played card from hand
    #####:  768:        discardCard(handPos, currentPlayer, state, 0);
    #####:  769:        return 0;
        -:  770:            
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    #####:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
    #####:  797:		isGameOver(state);
    #####:  798:	      }
    #####:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    #####:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
    #####:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
    #####:  814:	    isGameOver(state);
    #####:  815:	  }
    #####:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    #####:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    #####:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    #####:  876:			}
    #####:  877:		    }
    #####:  878:		}
    #####:  879:	    }
        -:  880:				
    #####:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
    #####:  885:            return stewardEffect(state, &currentPlayer, choice1, choice2, choice3, handPos);
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
    #####:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
    #####:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
    #####:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
    #####:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
    #####:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  932:	  state->coins += 2;
    #####:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
    #####:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  962:	    {
    #####:  963:	      j++;
    #####:  964:	    }
    #####:  965:	}
    #####:  966:      if (j < choice2)
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  983:	    }
    #####:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
    #####:  997:		  break;
        -:  998:		}
    #####:  999:	    }
    #####: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
    #####: 1027:		}
        -: 1028:					
    #####: 1029:	    }
        -: 1030:				
    #####: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
    #####: 1082:	if (i != currentPlayer){
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1086:	}
    #####: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (index > -1)
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
      302: 1122:}
        -: 1123:
        -: 1124:int adventurerEffect(int *drawntreasure, struct gameState *state, int *currentPlayer, int *z, int *temphand){
      592: 1125:    while((*drawntreasure)<2){
      281: 1126:        if (state->deckCount[*currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1127:            shuffle(*currentPlayer, state);
    #####: 1128:        }
      281: 1129:        drawCard(*currentPlayer, state);
      281: 1130:        int cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
      540: 1131:        if (cardDrawn == copper || cardDrawn == silver)
       30: 1132:            (*drawntreasure)++;
        -: 1133:        else{
      251: 1134:            temphand[(*z)]=cardDrawn;
      251: 1135:            state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      251: 1136:            (*z)++;
        -: 1137:        }
        -: 1138:    }
      532: 1139:    while((*z)-1>=0){
      251: 1140:        state->discard[*currentPlayer][state->discardCount[*currentPlayer]++]=temphand[(*z)-1]; // discard all cards in play that have been drawn
      251: 1141:        (*z)=(*z)-1;
        -: 1142:    }
       15: 1143:    return 0;
        -: 1144:}
        -: 1145:
        -: 1146:int mineEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
       60: 1147:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1148:    
      120: 1149:    if (state->hand[*currentPlayer][choice1] < copper || state->hand[*currentPlayer][choice1] > gold)
        -: 1150:    {
       15: 1151:        return -1;
        -: 1152:    }
        -: 1153:    
       45: 1154:    if (choice2 > treasure_map)
        -: 1155:    {
    #####: 1156:        return -1;
        -: 1157:    }
        -: 1158:
       45: 1159:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1160:    {
       28: 1161:        return -1;
        -: 1162:    }
        -: 1163:    
       17: 1164:    gainCard(choice2, state, 2, *currentPlayer);
        -: 1165:    
        -: 1166:    //discard card from hand
       17: 1167:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1168:    
        -: 1169:    //discard trashed card
      204: 1170:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1171:    {
       85: 1172:        if (state->hand[*currentPlayer][i] == j)
        -: 1173:        {
    #####: 1174:            discardCard(i, *currentPlayer, state, 0);
    #####: 1175:            break;
        -: 1176:        }
       85: 1177:    }
        -: 1178:    
       17: 1179:    return 0;
       60: 1180:}
        -: 1181:
        -: 1182:int remodelEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
      225: 1183:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1184:    
      225: 1185:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 1) > getCost(choice2) )
        -: 1186:    {
      137: 1187:        return -1;
        -: 1188:    }
        -: 1189:    
       88: 1190:    gainCard(choice2, state, 0, *currentPlayer);
        -: 1191:    
        -: 1192:    //discard card from hand
       88: 1193:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1194:    
        -: 1195:    //discard trashed card
      880: 1196:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1197:    {
      352: 1198:        if (state->hand[*currentPlayer][i] == j)
        -: 1199:        {
    #####: 1200:            discardCard(i, *currentPlayer, state, 1);
    #####: 1201:            break;
        -: 1202:        }
      352: 1203:    }
        -: 1204:    
        -: 1205:    
       88: 1206:    return 0;
      225: 1207:}
        -: 1208:
        -: 1209:int smithyEffect(struct gameState *state, int *currentPlayer, int handPos){
        -: 1210:    //+3 Cards
       20: 1211:    for (int i = 0; i <= 3; i++)
        -: 1212:    {
        8: 1213:        drawCard(*currentPlayer, state);
        8: 1214:    }
        -: 1215:    
        -: 1216:    //discard card from hand
        2: 1217:    discardCard(handPos, *currentPlayer, state,2);
        2: 1218:    return 0;
        -: 1219:}
        -: 1220:
        -: 1221:int stewardEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int choice3, int handPos){
    #####: 1222:    if (choice1 == 1)
        -: 1223:    {
        -: 1224:        //+2 cards
    #####: 1225:        drawCard(*currentPlayer, state);
    #####: 1226:        drawCard(*currentPlayer, state);
    #####: 1227:    }
    #####: 1228:    else if (choice1 == 2)
        -: 1229:    {
        -: 1230:        //+2 coins
    #####: 1231:        state->coins = state->coins + 2;
    #####: 1232:    }
        -: 1233:    else
        -: 1234:    {
        -: 1235:        //trash 2 cards in hand
    #####: 1236:        discardCard(choice2, *currentPlayer, state, 1);
    #####: 1237:        discardCard(choice3, *currentPlayer, state, 1);
        -: 1238:    }
        -: 1239:    
        -: 1240:    //discard card from hand
    #####: 1241:    discardCard(handPos, *currentPlayer, state, 0);
    #####: 1242:    return 0;
        -: 1243:}
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
      107: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to played pile
      105: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      105: 1255:      state->playedCardCount++;
      105: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
      107: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
      107: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
    #####: 1266:    }
      107: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
    #####: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
      107: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
      107: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
      107: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
      107: 1282:  return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
      581: 1290:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1291:    {
      204: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
      377: 1300:  if (toFlag == 1)
        -: 1301:    {
       68: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       68: 1303:      state->deckCount[player]++;
       68: 1304:    }
      309: 1305:  else if (toFlag == 2)
        -: 1306:    {
       85: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       85: 1308:      state->handCount[player]++;
       85: 1309:    }
        -: 1310:  else
        -: 1311:    {
      224: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      224: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
      377: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
      377: 1319:  return 0;
      581: 1320:}
        -: 1321:
        -: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
    11100: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
   133200: 1330:  for (i = 0; i < state->handCount[player]; i++)
        -: 1331:    {
    55500: 1332:      if (state->hand[player][i] == copper)
        -: 1333:	{
    40704: 1334:	  state->coins += 1;
    40704: 1335:	}
    14796: 1336:      else if (state->hand[player][i] == silver)
        -: 1337:	{
     1680: 1338:	  state->coins += 2;
     1680: 1339:	}
    13116: 1340:      else if (state->hand[player][i] == gold)
        -: 1341:	{
     1680: 1342:	  state->coins += 3;
     1680: 1343:	}	
    55500: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
    11100: 1347:  state->coins += bonus;
        -: 1348:
    11100: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:int customAssert(bool test){
    12512: 1353:    if (test == false){
      826: 1354:        printf("TEST FAILED\n");
      826: 1355:        return 1;
        -: 1356:    }
        -: 1357:    else{
    11686: 1358:        printf("TEST SUCCESSFULLY COMPLETED\n");
    11686: 1359:        return 0;
        -: 1360:    }
    12512: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
