        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
  3643735:    9:  if (*(int*)a > *(int*)b)
  1357742:   10:    return 1;
  2285993:   11:  if (*(int*)a < *(int*)b)
  1027562:   12:    return -1;
  1258431:   13:  return 0;
  3643735:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      570:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      300:   65:        }
       30:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        3:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        3:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
       30:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      435:  130:	}
        -:  131:
       60:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
       18:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;		
       42:  150:	}
        6:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        6:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        6:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
       81:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
       15:  193:    drawCard(state->whoseTurn, state);
       15:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        3:  198:  return 0;
        3:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   194216:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   194216:  209:  if (state->deckCount[player] < 1)
    55532:  210:    return -1;
   138684:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  3635236:  214:  while (state->deckCount[player] > 0) {
  1678934:  215:    card = floor(Random() * state->deckCount[player]);
  1678934:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1678934:  217:    newDeckPos++;
 24258352:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
 10450242:  219:      state->deck[player][i] = state->deck[player][i+1];
 10450242:  220:    }
  1678934:  221:    state->deckCount[player]--;
        -:  222:  }
  3635236:  223:  for (i = 0; i < newDeckPos; i++) {
  1678934:  224:    state->deck[player][i] = newDeck[i];
  1678934:  225:    state->deckCount[player]++;
  1678934:  226:  }
        -:  227:
   138684:  228:  return 0;
   194216:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    69745:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
   723584:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  3218053:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  3746168:  533:    for (i = 0; i < state->discardCount[player];i++){
  1678874:  534:      state->deck[player][i] = state->discard[player][i];
  1678874:  535:      state->discard[player][i] = -1;
  1678874:  536:    }
        -:  537:
   194210:  538:    state->deckCount[player] = state->discardCount[player];
   194210:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
   194210:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
   194210:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
   194210:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
   194210:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
   194210:  559:    if (deckCounter == 0)
    55532:  560:      return -1;
        -:  561:
   138678:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
   138678:  563:    state->deckCount[player]--;
   138678:  564:    state->handCount[player]++;//Increment hand count
   138678:  565:  }
        -:  566:
        -:  567:  else{
  3023843:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  3023843:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  3023843:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  3023843:  576:    state->deckCount[player]--;
  3023843:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  3162521:  580:  return 0;
  3218053:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
   669296:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    53746:  596:      return 0;
        -:  597:    case silver:
    53678:  598:      return 3;
        -:  599:    case gold:
    53770:  600:      return 6;
        -:  601:    case adventurer:
    53784:  602:      return 6;
        -:  603:    case council_room:
    53766:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    25694:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    53336:  614:      return 4;
        -:  615:    case village:
    53220:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    53704:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    54024:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    53480:  630:      return 4;
        -:  631:    case embargo: 
    53598:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    53496:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
   669296:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
   723584:  653:  int currentPlayer = whoseTurn(state);
   723584:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   723584:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
   723584:  658:  int drawntreasure=0;
   723584:  659:  int z = 0;// this is the counter for the temp hand
   723584:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
   723584:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
   140896:  669:            return adventurerEffect(&drawntreasure, state, &currentPlayer, &z, temphand);
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
    #####:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
    #####:  687:	    }
    #####:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
    #####:  708:	if (supplyCount(choice1, state) <= 0){
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
    #####:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
    #####:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
    #####:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
    #####:  752:            return mineEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  753:			
        -:  754:    case remodel:
   167324:  755:            return remodelEffect(state, &currentPlayer, choice1, choice2, handPos);
        -:  756:		
        -:  757:    case smithy:
   415364:  758:            return smithyEffect(state, &currentPlayer, handPos);
        -:  759:		
        -:  760:    case village:
        -:  761:        //+1 Card
    #####:  762:        drawCard(currentPlayer, state);
        -:  763:     
        -:  764:        //+2 Actions
    #####:  765:        state->numActions = state->numActions + 2;
        -:  766:     
        -:  767:        //discard played card from hand
    #####:  768:        discardCard(handPos, currentPlayer, state, 0);
    #####:  769:        return 0;
        -:  770:            
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    #####:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
    #####:  797:		isGameOver(state);
    #####:  798:	      }
    #####:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    #####:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
    #####:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
    #####:  814:	    isGameOver(state);
    #####:  815:	  }
    #####:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    #####:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    #####:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    #####:  876:			}
    #####:  877:		    }
    #####:  878:		}
    #####:  879:	    }
        -:  880:				
    #####:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
    #####:  885:            return stewardEffect(state, &currentPlayer, choice1, choice2, choice3, handPos);
        -:  886:		
        -:  887:    case tribute:
    #####:  888:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  889:	if (state->deckCount[nextPlayer] > 0){
    #####:  890:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	  state->deckCount[nextPlayer]--;
    #####:  892:	}
    #####:  893:	else if (state->discardCount[nextPlayer] > 0){
    #####:  894:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  895:	  state->discardCount[nextPlayer]--;
    #####:  896:	}
        -:  897:	else{
        -:  898:	  //No Card to Reveal
        -:  899:	  if (DEBUG){
        -:  900:	    printf("No cards to reveal\n");
        -:  901:	  }
        -:  902:	}
    #####:  903:      }
        -:  904:	    
        -:  905:      else{
    #####:  906:	if (state->deckCount[nextPlayer] == 0){
    #####:  907:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  908:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:	    state->deckCount[nextPlayer]++;
    #####:  910:	    state->discard[nextPlayer][i] = -1;
    #####:  911:	    state->discardCount[nextPlayer]--;
    #####:  912:	  }
        -:  913:			    
    #####:  914:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  915:	} 
    #####:  916:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
    #####:  919:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
        -:  922:      }    
        -:  923:		       
    #####:  924:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  925:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  926:	state->playedCardCount++;
    #####:  927:	tributeRevealedCards[1] = -1;
    #####:  928:      }
        -:  929:
    #####:  930:      for (i = 0; i <= 2; i ++){
    #####:  931:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  932:	  state->coins += 2;
    #####:  933:	}
        -:  934:		    
    #####:  935:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	}
        -:  939:	else{//Action Card
    #####:  940:	  state->numActions = state->numActions + 2;
        -:  941:	}
    #####:  942:      }
        -:  943:	    
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case ambassador:
    #####:  947:      j = 0;		//used to check if player has enough cards to discard
        -:  948:
    #####:  949:      if (choice2 > 2 || choice2 < 0)
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
    #####:  954:      if (choice1 == handPos)
        -:  955:	{
    #####:  956:	  return -1;
        -:  957:	}
        -:  958:
    #####:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
    #####:  961:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  962:	    {
    #####:  963:	      j++;
    #####:  964:	    }
    #####:  965:	}
    #####:  966:      if (j < choice2)
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
        -:  971:      if (DEBUG) 
        -:  972:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:			
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
        -:  981:	    {
    #####:  982:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  983:	    }
    #####:  984:	}
        -:  985:
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);			
        -:  988:
        -:  989:      //trash copies of cards returned to supply
    #####:  990:      for (j = 0; j < choice2; j++)
        -:  991:	{
    #####:  992:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  993:	    {
    #####:  994:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  995:		{
    #####:  996:		  discardCard(i, currentPlayer, state, 1);
    #####:  997:		  break;
        -:  998:		}
    #####:  999:	    }
    #####: 1000:	}			
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
    #####: 1027:		}
        -: 1028:					
    #####: 1029:	    }
        -: 1030:				
    #####: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      for (i = 0; i < state->numPlayers; i++){
    #####: 1082:	if (i != currentPlayer){
    #####: 1083:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1084:	  state->discardCount[i]++;
    #####: 1085:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1086:	}
    #####: 1087:      }
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case treasure_map:
        -: 1091:      //search hand for another treasure_map
    #####: 1092:      index = -1;
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	{
    #####: 1095:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1096:	    {
    #####: 1097:	      index = i;
    #####: 1098:	      break;
        -: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (index > -1)
        -: 1102:	{
        -: 1103:	  //trash both treasure cards
    #####: 1104:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1105:	  discardCard(index, currentPlayer, state, 1);
        -: 1106:
        -: 1107:	  //gain 4 Gold cards
    #####: 1108:	  for (i = 0; i < 4; i++)
        -: 1109:	    {
    #####: 1110:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1111:	    }
        -: 1112:				
        -: 1113:	  //return success
    #####: 1114:	  return 1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //no second treasure_map found in hand
    #####: 1118:      return -1;
        -: 1119:    }
        -: 1120:	
    #####: 1121:  return -1;
   723584: 1122:}
        -: 1123:
        -: 1124:int adventurerEffect(int *drawntreasure, struct gameState *state, int *currentPlayer, int *z, int *temphand){
  3394956: 1125:    while((*drawntreasure)<2){
  1556582: 1126:        if (state->deckCount[*currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1127:            shuffle(*currentPlayer, state);
    #####: 1128:        }
  1556582: 1129:        drawCard(*currentPlayer, state);
  1556582: 1130:        int cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
  2972287: 1131:        if (cardDrawn == copper || cardDrawn == silver)
   281792: 1132:            (*drawntreasure)++;
        -: 1133:        else{
  1274790: 1134:            temphand[(*z)]=cardDrawn;
  1274790: 1135:            state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  1274790: 1136:            (*z)++;
        -: 1137:        }
        -: 1138:    }
  2831372: 1139:    while((*z)-1>=0){
  1274790: 1140:        state->discard[*currentPlayer][state->discardCount[*currentPlayer]++]=temphand[(*z)-1]; // discard all cards in play that have been drawn
  1274790: 1141:        (*z)=(*z)-1;
        -: 1142:    }
   140896: 1143:    return 0;
        -: 1144:}
        -: 1145:
        -: 1146:int mineEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
    #####: 1147:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1148:    
    #####: 1149:    if (state->hand[*currentPlayer][choice1] < copper || state->hand[*currentPlayer][choice1] > gold)
        -: 1150:    {
    #####: 1151:        return -1;
        -: 1152:    }
        -: 1153:    
    #####: 1154:    if (choice2 > treasure_map)
        -: 1155:    {
    #####: 1156:        return -1;
        -: 1157:    }
        -: 1158:
    #####: 1159:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1160:    {
    #####: 1161:        return -1;
        -: 1162:    }
        -: 1163:    
    #####: 1164:    gainCard(choice2, state, 2, *currentPlayer);
        -: 1165:    
        -: 1166:    //discard card from hand
    #####: 1167:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1168:    
        -: 1169:    //discard trashed card
    #####: 1170:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1171:    {
    #####: 1172:        if (state->hand[*currentPlayer][i] == j)
        -: 1173:        {
    #####: 1174:            discardCard(i, *currentPlayer, state, 0);
    #####: 1175:            break;
        -: 1176:        }
    #####: 1177:    }
        -: 1178:    
    #####: 1179:    return 0;
    #####: 1180:}
        -: 1181:
        -: 1182:int remodelEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int handPos){
   167324: 1183:    int j = state->hand[*currentPlayer][choice1];  //store card we will trash
        -: 1184:    
   167324: 1185:    if ( (getCost(state->hand[*currentPlayer][choice1]) + 1) > getCost(choice2) )
        -: 1186:    {
    97579: 1187:        return -1;
        -: 1188:    }
        -: 1189:    
    69745: 1190:    gainCard(choice2, state, 0, *currentPlayer);
        -: 1191:    
        -: 1192:    //discard card from hand
    69745: 1193:    discardCard(handPos, *currentPlayer, state, 0);
        -: 1194:    
        -: 1195:    //discard trashed card
   390346: 1196:    for (int i = 0; i < state->handCount[*currentPlayer]; i++)
        -: 1197:    {
   195173: 1198:        if (state->hand[*currentPlayer][i] == j)
        -: 1199:        {
    69745: 1200:            discardCard(i, *currentPlayer, state, 1);
    69745: 1201:            break;
        -: 1202:        }
   125428: 1203:    }
        -: 1204:    
        -: 1205:    
    69745: 1206:    return 0;
   167324: 1207:}
        -: 1208:
        -: 1209:int smithyEffect(struct gameState *state, int *currentPlayer, int handPos){
        -: 1210:    //+3 Cards
  4153640: 1211:    for (int i = 0; i <= 3; i++)
        -: 1212:    {
  1661456: 1213:        drawCard(*currentPlayer, state);
  1661456: 1214:    }
        -: 1215:    
        -: 1216:    //discard card from hand
   415364: 1217:    discardCard(handPos, *currentPlayer, state,2);
   415364: 1218:    return 0;
        -: 1219:}
        -: 1220:
        -: 1221:int stewardEffect(struct gameState *state, int *currentPlayer, int choice1, int choice2, int choice3, int handPos){
    #####: 1222:    if (choice1 == 1)
        -: 1223:    {
        -: 1224:        //+2 cards
    #####: 1225:        drawCard(*currentPlayer, state);
    #####: 1226:        drawCard(*currentPlayer, state);
    #####: 1227:    }
    #####: 1228:    else if (choice1 == 2)
        -: 1229:    {
        -: 1230:        //+2 coins
    #####: 1231:        state->coins = state->coins + 2;
    #####: 1232:    }
        -: 1233:    else
        -: 1234:    {
        -: 1235:        //trash 2 cards in hand
    #####: 1236:        discardCard(choice2, *currentPlayer, state, 1);
    #####: 1237:        discardCard(choice3, *currentPlayer, state, 1);
        -: 1238:    }
        -: 1239:    
        -: 1240:    //discard card from hand
    #####: 1241:    discardCard(handPos, *currentPlayer, state, 0);
    #####: 1242:    return 0;
        -: 1243:}
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
   554854: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to played pile
    69745: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    69745: 1255:      state->playedCardCount++;
    69745: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
   554854: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
   554854: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    31801: 1265:      state->handCount[currentPlayer]--;
    31801: 1266:    }
   523053: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
    #####: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
   523053: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
   523053: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
   523053: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
   554854: 1282:  return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
    69745: 1290:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1291:    {
    34883: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
    34862: 1300:  if (toFlag == 1)
        -: 1301:    {
    #####: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1303:      state->deckCount[player]++;
    #####: 1304:    }
    34862: 1305:  else if (toFlag == 2)
        -: 1306:    {
    #####: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1308:      state->handCount[player]++;
    #####: 1309:    }
        -: 1310:  else
        -: 1311:    {
    34862: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    34862: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
    34862: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
    34862: 1319:  return 0;
    69745: 1320:}
        -: 1321:
        -: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
        3: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
       36: 1330:  for (i = 0; i < state->handCount[player]; i++)
        -: 1331:    {
       15: 1332:      if (state->hand[player][i] == copper)
        -: 1333:	{
       12: 1334:	  state->coins += 1;
       12: 1335:	}
        3: 1336:      else if (state->hand[player][i] == silver)
        -: 1337:	{
    #####: 1338:	  state->coins += 2;
    #####: 1339:	}
        3: 1340:      else if (state->hand[player][i] == gold)
        -: 1341:	{
    #####: 1342:	  state->coins += 3;
    #####: 1343:	}	
       15: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
        3: 1347:  state->coins += bonus;
        -: 1348:
        3: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:int customAssert(bool test){
  2533260: 1353:    if (test == false){
  1956201: 1354:        printf("TEST FAILED\n");
  1956201: 1355:        return 1;
        -: 1356:    }
        -: 1357:    else{
   577059: 1358:        printf("TEST SUCCESSFULLY COMPLETED\n");
   577059: 1359:        return 0;
        -: 1360:    }
  2533260: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
